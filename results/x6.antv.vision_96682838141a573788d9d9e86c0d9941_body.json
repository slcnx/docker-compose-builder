{
  "url": "https://x6.antv.vision/zh/docs/tutorial/intermediate/events",
  "metadata": {
    "title": "事件系统 | X6",
    "description": "JavaScript diagramming library",
    "keywords": [],
    "author": "",
    "publish_date": "",
    "domain": "x6.antv.vision"
  },
  "content": "[视图交互事件](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#视图交互事件 \"视图交互事件\")\n\n[鼠标事件](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#鼠标事件 \"鼠标事件\")\n\n[自定义点击事件](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#自定义点击事件 \"自定义点击事件\")\n\n[画布缩放/平移](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#画布缩放平移 \"画布缩放/平移\")\n\n[节点或边缩放/平移/旋转](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#节点或边缩放平移旋转 \"节点或边缩放/平移/旋转\")\n\n[节点嵌入](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#节点嵌入 \"节点嵌入\")\n\n[边连接/取消连接](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#边连接取消连接 \"边连接/取消连接\")\n\n[节点/边](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#节点边 \"节点/边\")\n\n[添加/删除/修改](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#添加删除修改 \"添加/删除/修改\")\n\n[change:xxx](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#changexxx \"change:xxx\")\n\n[动画](https://x6.antv.vision/zh/docs/tutorial/intermediate/events#动画 \"动画\")\n\n# 事件系统\n\n阅读时间约 8 分钟\n\n## 视图交互事件\n\n通过鼠标、键盘或者各种可交互的组件与应用产生交互时触发的事件，如单击节点 `'node:click'` 等。\n\n### 鼠标事件\n\n事件| cell 节点/边| node 节点| edge 边| blank 画布空白区域  \n---|---|---|---|---  \n单击| `cell:click`| `node:click`| `edge:click`| `blank:click`  \n双击| `cell:dblclick`| `node:dblclick`| `edge:dblclick`| `blank:dblclick`  \n右键| `cell:contextmenu`| `node:contextmenu`| `edge:contextmenu`| `blank:contextmenu`  \n鼠标按下| `cell:mousedown`| `node:mousedown`| `edge:mousedown`| `blank:mousedown`  \n移动鼠标| `cell:mousemove`| `node:mousemove`| `edge:mousemove`| `blank:mousemove`  \n鼠标抬起| `cell:mouseup`| `node:mouseup`| `edge:mouseup`| `blank:mouseup`  \n鼠标滚轮| `cell:mousewheel`| `node:mousewheel`| `edge:mousewheel`| `blank:mousewheel`  \n鼠标进入| `cell:mouseenter`| `node:mouseenter`| `edge:mouseenter`| `graph:mouseenter`  \n鼠标离开| `cell:mouseleave`| `node:mouseleave`| `edge:mouseleave`| `graph:mouseleave`  \n  \n需要注意的是，这里的 `mousemove` 事件和通常的鼠标移动事件有所区别，它需要在鼠标按下后移动鼠标才能触发。\n\n除了 `mouseenter` 和 `mouseleave` 外，事件回调函数的参数都包含鼠标相对于画布的位置 `x`、`y` 和鼠标事件对象 `e` 等参数。\n    \n    \n    graph.on('cell:click', ({ e, x, y, cell, view }) => { })\n    graph.on('node:click', ({ e, x, y, node, view }) => { })\n    graph.on('edge:click', ({ e, x, y, edge, view }) => { })\n    graph.on('blank:click', ({ e, x, y }) => { })\n    \n    graph.on('cell:mouseenter', ({ e, cell, view }) => { })\n    graph.on('node:mouseenter', ({ e, node, view }) => { })\n    graph.on('edge:mouseenter', ({ e, edge, view }) => { })\n    graph.on('graph:mouseenter', ({ e }) => { })\n\n点击下面 Demo 中的画布和节点。\n\n### 自定义点击事件\n\n我们可以在节点/边的 DOM 元素上添加自定义属性 `event` 或 `data-event` 来监听该元素的点击事件，例如：\n    \n    \n    node.attr({\n      // 表示一个删除按钮，点击时删除该节点\n      image: {\n        event: 'node:delete',\n        xlinkHref: 'trash.png',\n        width: 20,\n        height: 20,\n      },\n    })\n\n可以通过绑定的事件名 `node:delete` 或通用的 `cell:customevent`、`node:customevent`、`edge:customevent` 事件名来监听。\n    \n    \n    graph.on('node:delete', ({ view, e }) => {\n      e.stopPropagation()\n      view.cell.remove()\n    })\n    \n    graph.on('node:customevent', ({ name, view, e }) => {\n      if (name === 'node:delete') {\n        e.stopPropagation()\n        view.cell.remove()\n      }\n    })\n\n### 画布缩放/平移\n\n事件名| 回调参数| 说明  \n---|---|---  \n`scale`| `{ sx: number; sy: number; ox: number; oy: number }`| 缩放画布时触发，`sx` 和 `sy` 是缩放比例，`ox` 和 `oy` 是缩放中心。  \n`resize`| `{ width: number; height: number }`| 改变画布大小时触发，`width` 和 `height` 是画布大小。  \n`translate`| `{ tx: number; ty: number }`| 平移画布时触发，`tx` 和 `ty` 分别是 X 和 Y 轴的偏移量。  \n      \n    \n    graph.on('scale', ({ sx, sy, ox, oy }) => { })\n    graph.on('resize', ({ width, height }) => { })\n    graph.on('translate', ({ tx, ty }) => { })\n\n### 节点或边缩放/平移/旋转\n\n事件名| 回调参数| 说明  \n---|---|---  \n`node:move`| `{ e: JQuery.MouseDownEvent; x: number; y: number; node: Node; view: NodeView }`| 开始移动节点时触发。  \n`node:moving`| `{ e: JQuery.MouseMoveEvent; x: number; y: number; node: Node; view: NodeView }`| 移动节点时触发。  \n`node:moved`| `{ e: JQuery.MouseUpEvent; x: number; y: number; node: Node; view: NodeView }`| 移动节点后触发。  \n`edge:move`| `{ e: JQuery.MouseDownEvent; x: number; y: number; node: Node; view: NodeView }`| 开始移动边时触发。  \n`edge:moving`| `{ e: JQuery.MouseMoveEvent; x: number; y: number; node: Node; view: NodeView }`| 移动边时触发。  \n`edge:moved`| `{ e: JQuery.MouseUpEvent; x: number; y: number; node: Node; view: NodeView }`| 移动边后触发。  \n`node:resize`| `{ e: JQuery.MouseDownEvent; x: number; y: number; node: Node; view: NodeView }`| 开始调整节点大小时触发。  \n`node:resizing`| `{ e: JQuery.MouseMoveEvent; x: number; y: number; node: Node; view: NodeView }`| 调整节点大小时触发。  \n`node:resized`| `{ e: JQuery.MouseUpEvent; x: number; y: number; node: Node; view: NodeView }`| 调整节点大小后触发。  \n`node:rotate`| `{ e: JQuery.MouseDownEvent; x: number; y: number; node: Node; view: NodeView }`| 开始旋转节点时触发。  \n`node:rotating`| `{ e: JQuery.MouseMoveEvent; x: number; y: number; node: Node; view: NodeView }`| 旋转节点时触发。  \n`node:rotated`| `{ e: JQuery.MouseUpEvent; x: number; y: number; node: Node; view: NodeView }`| 旋转节点后触发。  \n  \n参数中的 `x` 和 `y` 是鼠标相对于画布的坐标。\n    \n    \n    graph.on('node:moved', ({ e, x, y, node, view }) => { })\n    graph.on('node:resized', ({ e, x, y, node, view }) => { })\n    graph.on('node:rotated', ({ e, x, y, node, view }) => { })\n\n### 节点嵌入\n\n事件名| 回调参数| 说明  \n---|---|---  \n`node:embed`| `{ e: JQuery.MouseDownEvent; x: number; y: number; node: Node; view: NodeView, currentParent: Node }`| 开启嵌入，在开始拖动节点时触发。  \n`node:embedding`| `{ e: JQuery.MouseMoveEvent; x: number; y: number; node: Node; view: NodeView, currentParent: Node, candidateParent: Node }`| 寻找目标节点过程中触发。  \n`node:embedded`| `{ e: JQuery.MouseUpEvent; x: number; y: number; node: Node; view: NodeView, previousParent: Node, currentParent: Node }`| 完成节点嵌入后触发。  \n  \n### 边连接/取消连接\n\n当拖动边的起始/终止箭头将边连接到节点/边或者将边从节点/边上分离后触发 `edge:connected`，回调函数的参数如下。\n    \n    \n    interface Args {\n      e: JQuery.MouseUpEvent  // 鼠标事件对象\n      edge: Edge              // 边\n      view: EdgeView          // 边的视图\n      isNew: boolean          // 是否是新创建的边\n      type: Edge.TerminalType // 操作的是起始箭头还是终止箭头（'source' | 'target'）\n    \n      previousCell?: Cell | null             // 交互前连接到的节点/边\n      previousView?: CellView | null         // 交互前连接到的节点/边的视图\n      previousPort?: string | null           // 交互前连接到的链接桩 ID\n      previousPoint?: Point.PointLike | null // 交互前连接到的点（将边的终端从空白处拖动到节点/边上时记录起始终端的位置）\n      previousMagnet?: Element | null        // 交互前连接到的元素\n    \n      currentCell?: Cell | null             // 交互后连接到的节点/边\n      currentView?: CellView | null         // 交互后连接到的节点/边的视图\n      currentPort?: string | null           // 交互后连接到的链接桩 ID\n      currentPoint?: Point.PointLike | null // 交互后连接到的点（将边的终端从节点/边上拖动到空白处时记录拖动后终端的位置）\n      currentMagnet?: Element | null        // 交互后连接到的元素\n    }\n\n我们可以通过 `isNew` 来判断连线完成后，对应的边是否是新创建的边。比如从一个链接桩开始，创建了一条边并连接到另一个节点/链接桩，此时 `isNew` 就为 `true`。\n    \n    \n    graph.on('edge:connected', ({ isNew, edge }) => {\n      if (isNew) {\n        // 对新创建的边进行插入数据库等持久化操作\n      }\n    })\n\n特别注意的是，参数中的 `previous...` 是记录操作终端在连接/取消连接之前的状态，所以在创建新的边的时候，它们都是 `null`。很多人在创建新边后获取 `sourceCell` 时误用了 `previousCell`，正确的使用方式是：\n    \n    \n    graph.on('edge:connected', ({ isNew, edge }) => {\n      if (isNew) {\n        const source = edge.getSourceCell()\n      }\n    })\n\n## 节点/边\n\n### 添加/删除/修改\n\n当节点/边被添加到画布时，触发以下事件：\n\n  * `added`\n  * `cell:added`\n  * `node:added`（仅当 cell 是节点时才触发）\n  * `edge:added`（仅当 cell 是边时才触发）\n\n\n\n当节点/边被移除时，触发以下事件：\n\n  * `removed`\n  * `cell:removed`\n  * `node:removed`（仅当 cell 是节点时才触发）\n  * `edge:removed`（仅当 cell 是边时才触发）\n\n\n\n当节点/边发生任何改变时，触发以下事件：\n\n  * `changed`\n  * `cell:changed`\n  * `node:changed`（仅当 cell 是节点时才触发）\n  * `edge:changed`（仅当 cell 是边时才触发）\n\n\n\n可以在节点/边上监听：\n    \n    \n    cell.on('added', ({ cell, index, options }) => { })\n    cell.on('removed', ({ cell, index, options }) => { })\n    cell.on('changed', ({ cell, options }) => { })\n\n或者在 Graph 上监听：\n    \n    \n    graph.on('cell:added', ({ cell, index, options }) => { })\n    graph.on('cell:removed', ({ cell, index, options }) => { })\n    graph.on('cell:changed', ({ cell, options }) => { })\n    \n    graph.on('node:added', ({ node, index, options }) => { })\n    graph.on('node:removed', ({ node, index, options }) => { })\n    graph.on('node:changed', ({ node, options }) => { })\n    \n    graph.on('edge:added', ({ edge, index, options }) => { })\n    graph.on('edge:removed', ({ edge, index, options }) => { })\n    graph.on('edge:changed', ({ edge, options }) => { })\n\n### change:xxx\n\n当调用 `setXxx(val, options)` 和 `removeXxx(options)` 方法去改变节点/边的数据时，并且 `options.silent` 不为 `true` 时，都将触发对应的 `chang` 事件，并触发节点/边重绘。例如：\n    \n    \n    cell.setZIndex(2)\n    cell.setZIndex(2, { silent: false })\n    cell.setZIndex(2, { anyKey: 'anyValue' })\n\n将触发 Cell 上的以下事件：\n\n  * `change:*`\n  * `change:zIndex`\n\n\n\n和 Graph 上的以下事件：\n\n  * `cell:change:*`\n  * `node:change:*`（仅当 cell 是节点时才触发）\n  * `edge:change:*`（仅当 cell 是边时才触发）\n  * `cell:change:zIndex`\n  * `node:change:zIndex`（仅当 cell 是节点时才触发）\n  * `edge:change:zIndex`（仅当 cell 是边时才触发）\n\n\n\n可以在节点/边上监听：\n    \n    \n    // 当 cell 发生任何改变时都将被触发，可以通过 key 来确定改变项\n    cell.on('change:*', (args: {\n      cell: Cell    \n      key: string   // 通过 key 来确定改变项\n      current: any  // 当前值\n      previous: any // 改变之前的值\n      options: any  // 透传的 options\n    }) => { \n      if (key === 'zIndex') {\n        // \n      }\n    })\n    \n    cell.on('change:zIndex', (args: {\n      cell: Cell\n      current?: number  // 当前值\n      previous?: number // 改变之前的值\n      options: any      // 透传的 options\n    }) => { })\n\n或者在 Graph 上监听：\n    \n    \n    graph.on('cell:change:*', (args: {\n      cell: Cell    \n      key: string   // 通过 key 来确定改变项\n      current: any  // 当前值，类型根据 key 指代的类型确定\n      previous: any // 改变之前的值，类型根据 key 指代的类型确定\n      options: any  // 透传的 options\n    }) => { })\n    \n    // 当 cell 为节点时触发\n    graph.on('node:change:*', (args: {\n      cell: Cell    \n      node: Node\n      key: string   // 通过 key 来确定改变项\n      current: any  // 当前值，类型根据 key 指代的类型确定\n      previous: any // 改变之前的值，类型根据 key 指代的类型确定\n      options: any  // 透传的 options\n    }) => { })\n    \n    // 当 cell 为边时触发\n    graph.on('edge:change:*', (args: {\n      cell: Cell    \n      edge: Edge\n      key: string   // 通过 key 来确定改变项\n      current: any  // 当前值，类型根据 key 指代的类型确定\n      previous: any // 改变之前的值，类型根据 key 指代的类型确定\n      options: any  // 透传的 options\n    }) => { })\n    \n    graph.on('cell:change:zIndex', (args: {\n      cell: Cell\n      current?: number  // 当前值\n      previous?: number // 改变之前的值\n      options: any      // 透传的 options\n    }) => { })\n    \n    // 当 cell 为节点时触发\n    graph.on('node:change:zIndex', (args: {\n      cell: Cell\n      node: Node\n      current?: number  // 当前值\n      previous?: number // 改变之前的值\n      options: any      // 透传的 options\n    }) => { })\n    \n    // 当 cell 为边时触发\n    graph.on('edge:change:zIndex', (args: {\n      cell: Cell\n      edge: Edge        \n      current?: number  // 当前值\n      previous?: number // 改变之前的值\n      options: any      // 透传的 options\n    }) => { })\n\n其他 `change` 事件如下列表，回调函数的参数与上面提到的 `change:zIndex` 的参数结构一致。\n\n  * Cell\n\n    * `change:*`\n    * `change:attrs`\n    * `change:zIndex`\n    * `change:markup`\n    * `change:visible`\n    * `change:parent`\n    * `change:children`\n    * `change:view`\n    * `change:data`\n  * Node\n\n    * `change:size`\n    * `change:angle`\n    * `change:position`\n    * `change:ports`\n    * `change:portMarkup`\n    * `change:portLabelMarkup`\n    * `change:portContainerMarkup`\n    * `ports:added`\n    * `ports:removed`\n  * Edge\n\n    * `change:source`\n    * `change:target`\n    * `change:terminal`\n    * `change:router`\n    * `change:connector`\n    * `change:vertices`\n    * `change:labels`\n    * `change:defaultLabel`\n    * `change:toolMarkup`\n    * `change:doubleToolMarkup`\n    * `change:vertexMarkup`\n    * `change:arrowheadMarkup`\n    * `vertexs:added`\n    * `vertexs:removed`\n    * `labels:added`\n    * `labels:removed`\n\n\n\n除了上述这些内置的 Key，我们也支持监听自定义的 Key，例如\n    \n    \n    cell.on('change:custom', ({ cell, current, previous, options}) => {\n      console.log(current)\n    })\n\n当通过 `cell.prop('custom', 'any data')` 方法修改 `custom` 属性的值时将触发 `change:custom` 事件。\n\n### 动画\n\n  * `'transition:start'` 动画开始时触发\n  * `'transition:progress'` 动画过程中触发\n  * `'transition:complete'` 动画完成时触发\n  * `'transition:stop'` 动画被停止时触发\n  * `'transition:finish'` 动画完成或被停止时触发\n\n\n    \n    \n    cell.on('transition:start', (args: Animation.CallbackArgs) => {})\n    cell.on('transition:progress', (args: Animation.ProgressArgs) => {})\n    cell.on('transition:complete', (args: Animation.CallbackArgs) => {})\n    cell.on('transition:stop', (args: Animation.StopArgs) => {})\n    cell.on('transition:finish', (args: Animation.CallbackArgs) => {})\n    \n    graph.on('cell:transition:start', (args: Animation.CallbackArgs) => {})\n    graph.on('cell:transition:progress', (args: Animation.ProgressArgs) => {})\n    graph.on('cell:transition:complete', (args: Animation.CallbackArgs) => {})\n    graph.on('cell:transition:stop', (args: Animation.StopArgs) => {})\n    graph.on('cell:transition:finish', (args: Animation.CallbackArgs) => {})\n    \n    graph.on('node:transition:start', (args: Animation.CallbackArgs) => {})\n    graph.on('node:transition:progress', (args: Animation.ProgressArgs) => {})\n    graph.on('node:transition:complete', (args: Animation.CallbackArgs) => {})\n    graph.on('node:transition:stop', (args: Animation.StopArgs) => {})\n    graph.on('node:transition:finish', (args: Animation.CallbackArgs) => {})\n    \n    graph.on('edge:transition:start', (args: Animation.CallbackArgs) => {})\n    graph.on('edge:transition:progress', (args: Animation.ProgressArgs) => {})\n    graph.on('edge:transition:complete', (args: Animation.CallbackArgs) => {})\n    graph.on('edge:transition:stop', (args: Animation.StopArgs) => {})\n    graph.on('edge:transition:finish', (args: Animation.CallbackArgs) => {})\n\n  * [画布 Graph](https://x6.antv.vision/zh/docs/tutorial/basic/graph)\n  * [基类 Cell](https://x6.antv.vision/zh/docs/tutorial/basic/cell)\n  * [节点 Node](https://x6.antv.vision/zh/docs/tutorial/basic/node)\n  * [边 Edge](https://x6.antv.vision/zh/docs/tutorial/basic/edge)\n  * [群组 Group](https://x6.antv.vision/zh/docs/tutorial/basic/group)\n  * [连接桩 Port](https://x6.antv.vision/zh/docs/tutorial/basic/port)\n  * [网格 Grid](https://x6.antv.vision/zh/docs/tutorial/basic/grid)\n  * [背景 Background](https://x6.antv.vision/zh/docs/tutorial/basic/background)\n  * [剪切板 Clipboard](https://x6.antv.vision/zh/docs/tutorial/basic/clipboard)\n  * [撤销/重做 Undo/Redo](https://x6.antv.vision/zh/docs/tutorial/basic/history)\n  * [点选/框选 Selection](https://x6.antv.vision/zh/docs/tutorial/basic/selection)\n  * [对齐线 Snapline](https://x6.antv.vision/zh/docs/tutorial/basic/snapline)\n  * [滚动 Scroller](https://x6.antv.vision/zh/docs/tutorial/basic/scroller)\n  * [小地图 MiniMap](https://x6.antv.vision/zh/docs/tutorial/basic/minimap)\n  * [拖拽 Dnd](https://x6.antv.vision/zh/docs/tutorial/basic/dnd)\n  * [键盘快捷键 Keyboard](https://x6.antv.vision/zh/docs/tutorial/basic/keyboard)\n  * [滚轮缩放 MouseWheel](https://x6.antv.vision/zh/docs/tutorial/basic/mousewheel)\n  * [节点和边的交互](https://x6.antv.vision/zh/docs/tutorial/basic/interacting)\n\n\n\n  * [序列化/反序列化](https://x6.antv.vision/zh/docs/tutorial/intermediate/serialization)\n  * [事件系统](https://x6.antv.vision/zh/docs/tutorial/intermediate/events)\n  * [特殊属性](https://x6.antv.vision/zh/docs/tutorial/intermediate/attrs)\n  * [自定义节点](https://x6.antv.vision/zh/docs/tutorial/intermediate/custom-node)\n  * [自定义边](https://x6.antv.vision/zh/docs/tutorial/intermediate/custom-edge)\n  * [使用标签 Labels](https://x6.antv.vision/zh/docs/tutorial/intermediate/edge-labels)\n  * [使用箭头 Marker](https://x6.antv.vision/zh/docs/tutorial/intermediate/marker)\n  * [使用工具 Tools](https://x6.antv.vision/zh/docs/tutorial/intermediate/tools)\n\n\n\n  * [使用动画](https://x6.antv.vision/zh/docs/tutorial/advanced/animation)\n  * [使用 HTML/React/Vue/Angular 渲染](https://x6.antv.vision/zh/docs/tutorial/advanced/react)\n  * [使用 UI 组件](https://x6.antv.vision/zh/docs/tutorial/advanced/components)\n  * [使用布局](https://x6.antv.vision/zh/docs/tutorial/advanced/layout)\n\n\n\n  * [简介](https://x6.antv.vision/zh/docs/tutorial/about)\n  * [快速上手](https://x6.antv.vision/zh/docs/tutorial/getting-started)\n  * 基础教程 __\n\n    * [画布 Graph](https://x6.antv.vision/zh/docs/tutorial/basic/graph)\n    * [基类 Cell](https://x6.antv.vision/zh/docs/tutorial/basic/cell)\n    * [节点 Node](https://x6.antv.vision/zh/docs/tutorial/basic/node)\n    * [边 Edge](https://x6.antv.vision/zh/docs/tutorial/basic/edge)\n    * [群组 Group](https://x6.antv.vision/zh/docs/tutorial/basic/group)\n    * [连接桩 Port](https://x6.antv.vision/zh/docs/tutorial/basic/port)\n    * [网格 Grid](https://x6.antv.vision/zh/docs/tutorial/basic/grid)\n    * [背景 Background](https://x6.antv.vision/zh/docs/tutorial/basic/background)\n    * [剪切板 Clipboard](https://x6.antv.vision/zh/docs/tutorial/basic/clipboard)\n    * [撤销/重做 Undo/Redo](https://x6.antv.vision/zh/docs/tutorial/basic/history)\n    * [点选/框选 Selection](https://x6.antv.vision/zh/docs/tutorial/basic/selection)\n    * [对齐线 Snapline](https://x6.antv.vision/zh/docs/tutorial/basic/snapline)\n    * [滚动 Scroller](https://x6.antv.vision/zh/docs/tutorial/basic/scroller)\n    * [小地图 MiniMap](https://x6.antv.vision/zh/docs/tutorial/basic/minimap)\n    * [拖拽 Dnd](https://x6.antv.vision/zh/docs/tutorial/basic/dnd)\n    * [键盘快捷键 Keyboard](https://x6.antv.vision/zh/docs/tutorial/basic/keyboard)\n    * [滚轮缩放 MouseWheel](https://x6.antv.vision/zh/docs/tutorial/basic/mousewheel)\n    * [节点和边的交互](https://x6.antv.vision/zh/docs/tutorial/basic/interacting)\n  * 进阶实践 __\n\n    * [序列化/反序列化](https://x6.antv.vision/zh/docs/tutorial/intermediate/serialization)\n    * [事件系统](https://x6.antv.vision/zh/docs/tutorial/intermediate/events)\n    * [特殊属性](https://x6.antv.vision/zh/docs/tutorial/intermediate/attrs)\n    * [自定义节点](https://x6.antv.vision/zh/docs/tutorial/intermediate/custom-node)\n    * [自定义边](https://x6.antv.vision/zh/docs/tutorial/intermediate/custom-edge)\n    * [使用标签 Labels](https://x6.antv.vision/zh/docs/tutorial/intermediate/edge-labels)\n    * [使用箭头 Marker](https://x6.antv.vision/zh/docs/tutorial/intermediate/marker)\n    * [使用工具 Tools](https://x6.antv.vision/zh/docs/tutorial/intermediate/tools)\n  * 高级指引 __\n\n    * [使用动画](https://x6.antv.vision/zh/docs/tutorial/advanced/animation)\n    * [使用 HTML/React/Vue/Angular 渲染](https://x6.antv.vision/zh/docs/tutorial/advanced/react)\n    * [使用 UI 组件](https://x6.antv.vision/zh/docs/tutorial/advanced/components)\n    * [使用布局](https://x6.antv.vision/zh/docs/tutorial/advanced/layout)\n  * [联系我们](https://x6.antv.vision/zh/docs/tutorial/contact)\n\n\n"
}
