{
  "url": "https://x6.antv.vision/zh/docs/api/model/cell/#addchild",
  "metadata": {
    "title": "Cell | X6",
    "description": "JavaScript diagramming library",
    "keywords": [],
    "author": "",
    "publish_date": "",
    "domain": "x6.antv.vision"
  },
  "content": "[constructor](https://x6.antv.vision/zh/docs/api/model/cell/#constructor \"constructor\")\n\n[id](https://x6.antv.vision/zh/docs/api/model/cell/#id \"id\")\n\n[markup](https://x6.antv.vision/zh/docs/api/model/cell/#markup \"markup\")\n\n[tagName](https://x6.antv.vision/zh/docs/api/model/cell/#tagname \"tagName\")\n\n[ns](https://x6.antv.vision/zh/docs/api/model/cell/#ns \"ns\")\n\n[selector](https://x6.antv.vision/zh/docs/api/model/cell/#selector \"selector\")\n\n[groupSelector](https://x6.antv.vision/zh/docs/api/model/cell/#groupselector \"groupSelector\")\n\n[attrs](https://x6.antv.vision/zh/docs/api/model/cell/#attrs \"attrs\")\n\n[style](https://x6.antv.vision/zh/docs/api/model/cell/#style \"style\")\n\n[className](https://x6.antv.vision/zh/docs/api/model/cell/#classname \"className\")\n\n[textContent](https://x6.antv.vision/zh/docs/api/model/cell/#textcontent \"textContent\")\n\n[children](https://x6.antv.vision/zh/docs/api/model/cell/#children \"children\")\n\n[attrs](https://x6.antv.vision/zh/docs/api/model/cell/#attrs-1 \"attrs\")\n\n[shape](https://x6.antv.vision/zh/docs/api/model/cell/#shape \"shape\")\n\n[view](https://x6.antv.vision/zh/docs/api/model/cell/#view \"view\")\n\n[zIndex](https://x6.antv.vision/zh/docs/api/model/cell/#zindex \"zIndex\")\n\n[visible](https://x6.antv.vision/zh/docs/api/model/cell/#visible \"visible\")\n\n[parent](https://x6.antv.vision/zh/docs/api/model/cell/#parent \"parent\")\n\n[children](https://x6.antv.vision/zh/docs/api/model/cell/#children-1 \"children\")\n\n[tools](https://x6.antv.vision/zh/docs/api/model/cell/#tools \"tools\")\n\n[data](https://x6.antv.vision/zh/docs/api/model/cell/#data \"data\")\n\n[prototype](https://x6.antv.vision/zh/docs/api/model/cell/#prototype \"prototype\")\n\n[通用](https://x6.antv.vision/zh/docs/api/model/cell/#通用 \"通用\")\n\n[get model](https://x6.antv.vision/zh/docs/api/model/cell/#get-model \"get model\")\n\n[get shape](https://x6.antv.vision/zh/docs/api/model/cell/#get-shape \"get shape\")\n\n[get view](https://x6.antv.vision/zh/docs/api/model/cell/#get-view \"get view\")\n\n[isNode()](https://x6.antv.vision/zh/docs/api/model/cell/#isnode \"isNode\\(\\)\")\n\n[isEdge()](https://x6.antv.vision/zh/docs/api/model/cell/#isedge \"isEdge\\(\\)\")\n\n[toJSON(...)](https://x6.antv.vision/zh/docs/api/model/cell/#tojson \"toJSON\\(...\\)\")\n\n[clone(...)](https://x6.antv.vision/zh/docs/api/model/cell/#clone \"clone\\(...\\)\")\n\n[on(...)](https://x6.antv.vision/zh/docs/api/model/cell/#on \"on\\(...\\)\")\n\n[once(...)](https://x6.antv.vision/zh/docs/api/model/cell/#once \"once\\(...\\)\")\n\n[off(...)](https://x6.antv.vision/zh/docs/api/model/cell/#off \"off\\(...\\)\")\n\n[trigger(...)](https://x6.antv.vision/zh/docs/api/model/cell/#trigger \"trigger\\(...\\)\")\n\n[dispose()](https://x6.antv.vision/zh/docs/api/model/cell/#dispose \"dispose\\(\\)\")\n\n[标签结构 markup](https://x6.antv.vision/zh/docs/api/model/cell/#标签结构-markup \"标签结构 markup\")\n\n[get markup](https://x6.antv.vision/zh/docs/api/model/cell/#get-markup \"get markup\")\n\n[set markup](https://x6.antv.vision/zh/docs/api/model/cell/#set-markup \"set markup\")\n\n[getMarkup()](https://x6.antv.vision/zh/docs/api/model/cell/#getmarkup \"getMarkup\\(\\)\")\n\n[setMarkup(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setmarkup \"setMarkup\\(...\\)\")\n\n[removeMarkup(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removemarkup \"removeMarkup\\(...\\)\")\n\n[元素属性 attrs](https://x6.antv.vision/zh/docs/api/model/cell/#元素属性-attrs \"元素属性 attrs\")\n\n[get attrs](https://x6.antv.vision/zh/docs/api/model/cell/#get-attrs \"get attrs\")\n\n[set attrs](https://x6.antv.vision/zh/docs/api/model/cell/#set-attrs \"set attrs\")\n\n[getAttrs()](https://x6.antv.vision/zh/docs/api/model/cell/#getattrs \"getAttrs\\(\\)\")\n\n[setAttrs(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setattrs \"setAttrs\\(...\\)\")\n\n[replaceAttrs(...)](https://x6.antv.vision/zh/docs/api/model/cell/#replaceattrs \"replaceAttrs\\(...\\)\")\n\n[updateAttrs(...)](https://x6.antv.vision/zh/docs/api/model/cell/#updateattrs \"updateAttrs\\(...\\)\")\n\n[removeAttrs(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removeattrs \"removeAttrs\\(...\\)\")\n\n[getAttrByPath(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getattrbypath \"getAttrByPath\\(...\\)\")\n\n[setAttrByPath(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setattrbypath \"setAttrByPath\\(...\\)\")\n\n[removeAttrByPath(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removeattrbypath \"removeAttrByPath\\(...\\)\")\n\n[attr(...)](https://x6.antv.vision/zh/docs/api/model/cell/#attr \"attr\\(...\\)\")\n\n[层级 zIndex](https://x6.antv.vision/zh/docs/api/model/cell/#层级-zindex \"层级 zIndex\")\n\n[get zIndex](https://x6.antv.vision/zh/docs/api/model/cell/#get-zindex \"get zIndex\")\n\n[set zIndex](https://x6.antv.vision/zh/docs/api/model/cell/#set-zindex \"set zIndex\")\n\n[getZIndex()](https://x6.antv.vision/zh/docs/api/model/cell/#getzindex \"getZIndex\\(\\)\")\n\n[setZIndex(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setzindex \"setZIndex\\(...\\)\")\n\n[removeZIndex(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removezindex \"removeZIndex\\(...\\)\")\n\n[toFront(...)](https://x6.antv.vision/zh/docs/api/model/cell/#tofront \"toFront\\(...\\)\")\n\n[toBack(...)](https://x6.antv.vision/zh/docs/api/model/cell/#toback \"toBack\\(...\\)\")\n\n[可见性 Visible](https://x6.antv.vision/zh/docs/api/model/cell/#可见性-visible \"可见性 Visible\")\n\n[get visible](https://x6.antv.vision/zh/docs/api/model/cell/#get-visible \"get visible\")\n\n[set visible](https://x6.antv.vision/zh/docs/api/model/cell/#set-visible \"set visible\")\n\n[show(...)](https://x6.antv.vision/zh/docs/api/model/cell/#show \"show\\(...\\)\")\n\n[hide(...)](https://x6.antv.vision/zh/docs/api/model/cell/#hide \"hide\\(...\\)\")\n\n[isVisible()](https://x6.antv.vision/zh/docs/api/model/cell/#isvisible \"isVisible\\(\\)\")\n\n[setVisible(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setvisible \"setVisible\\(...\\)\")\n\n[toggleVisible(...)](https://x6.antv.vision/zh/docs/api/model/cell/#togglevisible \"toggleVisible\\(...\\)\")\n\n[业务数据 Data](https://x6.antv.vision/zh/docs/api/model/cell/#业务数据-data \"业务数据 Data\")\n\n[get data](https://x6.antv.vision/zh/docs/api/model/cell/#get-data \"get data\")\n\n[set data](https://x6.antv.vision/zh/docs/api/model/cell/#set-data \"set data\")\n\n[getData()](https://x6.antv.vision/zh/docs/api/model/cell/#getdata \"getData\\(\\)\")\n\n[setData(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setdata \"setData\\(...\\)\")\n\n[replaceData(...)](https://x6.antv.vision/zh/docs/api/model/cell/#replacedata \"replaceData\\(...\\)\")\n\n[updateData(...)](https://x6.antv.vision/zh/docs/api/model/cell/#updatedata \"updateData\\(...\\)\")\n\n[removeData(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removedata \"removeData\\(...\\)\")\n\n[父子关系 Parent/Children](https://x6.antv.vision/zh/docs/api/model/cell/#父子关系-parentchildren \"父子关系 Parent/Children\")\n\n[get parent](https://x6.antv.vision/zh/docs/api/model/cell/#get-parent \"get parent\")\n\n[getParent()](https://x6.antv.vision/zh/docs/api/model/cell/#getparent \"getParent\\(\\)\")\n\n[setParent(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setparent \"setParent\\(...\\)\")\n\n[getParentId()](https://x6.antv.vision/zh/docs/api/model/cell/#getparentid \"getParentId\\(\\)\")\n\n[hasParent()](https://x6.antv.vision/zh/docs/api/model/cell/#hasparent \"hasParent\\(\\)\")\n\n[get children](https://x6.antv.vision/zh/docs/api/model/cell/#get-children \"get children\")\n\n[getChildren()](https://x6.antv.vision/zh/docs/api/model/cell/#getchildren \"getChildren\\(\\)\")\n\n[setChildren()](https://x6.antv.vision/zh/docs/api/model/cell/#setchildren \"setChildren\\(\\)\")\n\n[isParentOf(...)](https://x6.antv.vision/zh/docs/api/model/cell/#isparentof \"isParentOf\\(...\\)\")\n\n[isChildOf(...)](https://x6.antv.vision/zh/docs/api/model/cell/#ischildof \"isChildOf\\(...\\)\")\n\n[eachChild(...)](https://x6.antv.vision/zh/docs/api/model/cell/#eachchild \"eachChild\\(...\\)\")\n\n[filterChild(...)](https://x6.antv.vision/zh/docs/api/model/cell/#filterchild \"filterChild\\(...\\)\")\n\n[getChildCount()](https://x6.antv.vision/zh/docs/api/model/cell/#getchildcount \"getChildCount\\(\\)\")\n\n[getChildIndex(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getchildindex \"getChildIndex\\(...\\)\")\n\n[getChildAt(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getchildat \"getChildAt\\(...\\)\")\n\n[getAncestors(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getancestors \"getAncestors\\(...\\)\")\n\n[getDescendants(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getdescendants \"getDescendants\\(...\\)\")\n\n[isDescendantOf(...)](https://x6.antv.vision/zh/docs/api/model/cell/#isdescendantof \"isDescendantOf\\(...\\)\")\n\n[isAncestorOf(...)](https://x6.antv.vision/zh/docs/api/model/cell/#isancestorof \"isAncestorOf\\(...\\)\")\n\n[getCommonAncestor(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getcommonancestor \"getCommonAncestor\\(...\\)\")\n\n[addTo(...)](https://x6.antv.vision/zh/docs/api/model/cell/#addto \"addTo\\(...\\)\")\n\n[insertTo(...)](https://x6.antv.vision/zh/docs/api/model/cell/#insertto \"insertTo\\(...\\)\")\n\n[addChild(...)](https://x6.antv.vision/zh/docs/api/model/cell/#addchild \"addChild\\(...\\)\")\n\n[insertChild(...)](https://x6.antv.vision/zh/docs/api/model/cell/#insertchild \"insertChild\\(...\\)\")\n\n[embed(...)](https://x6.antv.vision/zh/docs/api/model/cell/#embed \"embed\\(...\\)\")\n\n[unembed(...)](https://x6.antv.vision/zh/docs/api/model/cell/#unembed \"unembed\\(...\\)\")\n\n[removeFromParent(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removefromparent \"removeFromParent\\(...\\)\")\n\n[removeChild(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removechild \"removeChild\\(...\\)\")\n\n[removeChildAt(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removechildat \"removeChildAt\\(...\\)\")\n\n[remove(...)](https://x6.antv.vision/zh/docs/api/model/cell/#remove \"remove\\(...\\)\")\n\n[节点和边的属性 Properties](https://x6.antv.vision/zh/docs/api/model/cell/#节点和边的属性-properties \"节点和边的属性 Properties\")\n\n[getProp(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getprop \"getProp\\(...\\)\")\n\n[setProp(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setprop \"setProp\\(...\\)\")\n\n[removeProp(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removeprop \"removeProp\\(...\\)\")\n\n[getPropByPath(...)](https://x6.antv.vision/zh/docs/api/model/cell/#getpropbypath \"getPropByPath\\(...\\)\")\n\n[setPropByPath(...)](https://x6.antv.vision/zh/docs/api/model/cell/#setpropbypath \"setPropByPath\\(...\\)\")\n\n[removePropByPath(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removepropbypath \"removePropByPath\\(...\\)\")\n\n[prop(...)](https://x6.antv.vision/zh/docs/api/model/cell/#prop \"prop\\(...\\)\")\n\n[hasChanged(...)](https://x6.antv.vision/zh/docs/api/model/cell/#haschanged \"hasChanged\\(...\\)\")\n\n[previous(...)](https://x6.antv.vision/zh/docs/api/model/cell/#previous \"previous\\(...\\)\")\n\n[工具集 Tools](https://x6.antv.vision/zh/docs/api/model/cell/#工具集-tools \"工具集 Tools\")\n\n[addTools(...)](https://x6.antv.vision/zh/docs/api/model/cell/#addtools \"addTools\\(...\\)\")\n\n[getTools()](https://x6.antv.vision/zh/docs/api/model/cell/#gettools \"getTools\\(\\)\")\n\n[removeTools(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removetools \"removeTools\\(...\\)\")\n\n[hasTool(name: string): boolean](https://x6.antv.vision/zh/docs/api/model/cell/#hastoolname-string-boolean \"hasTool\\(name: string\\): boolean\")\n\n[removeTool(...)](https://x6.antv.vision/zh/docs/api/model/cell/#removetool \"removeTool\\(...\\)\")\n\n[动画 Transition](https://x6.antv.vision/zh/docs/api/model/cell/#动画-transition \"动画 Transition\")\n\n[transition(...)](https://x6.antv.vision/zh/docs/api/model/cell/#transition \"transition\\(...\\)\")\n\n[stopTransition(...)](https://x6.antv.vision/zh/docs/api/model/cell/#stoptransition \"stopTransition\\(...\\)\")\n\n[getTransitions()](https://x6.antv.vision/zh/docs/api/model/cell/#gettransitions \"getTransitions\\(\\)\")\n\n[config(...)](https://x6.antv.vision/zh/docs/api/model/cell/#config \"config\\(...\\)\")\n\n[选项默认值](https://x6.antv.vision/zh/docs/api/model/cell/#选项默认值 \"选项默认值\")\n\n[自定义选项](https://x6.antv.vision/zh/docs/api/model/cell/#自定义选项 \"自定义选项\")\n\n[自定义属性](https://x6.antv.vision/zh/docs/api/model/cell/#自定义属性 \"自定义属性\")\n\n# Cell\n\n阅读时间约 40 分钟\n\nCell 是 [Node](https://x6.antv.vision/zh/docs/api/model/node) 和 [Edge](https://x6.antv.vision/zh/docs/api/model/edge) 的基类，包含节点和边的通用属性和方法定义，如属性样式、可见性、业务数据等，并且在实例化、样式定制、默认选项、自定义选项等方面具有相同的行为。\n\n## constructor\n    \n    \n    new Cell(metadata?: Cell.Metadata)\n\n其中 `Cell.Metadata` 包含节点和边的通用选项，详细配置如下表：\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \nid| string| | | 节点/边的唯一标识，推荐使用具备业务意义的 ID，默认使用自动生成的 UUID。  \nmarkup| Markup| | | 节点/边的 SVG/HTML 片段。  \nattrs| Attr.CellAttrs| | | 节点/边属性样式。  \nshape| string| | | 渲染节点/边的图形。节点对应的默认值为 `'rect'`，边对应的默认值为 `'edge'`。  \nview| string| | | 渲染节点/边的视图。  \nzIndex| number| | | 节点/边在画布中的层级，默认根据节点/边添加顺序自动确定。  \nvisible| boolean| `true`| | 节点/边是否可见。  \nparent| string| | | 父节点。  \nchildren| string[]| | | 子节点/边。  \ntools| ToolItem | ToolItem[] | Tools| | | 工具选项。  \ndata| any| | | 节点/边关联的业务数据。  \n  \n### id\n\n`id` 是节点/边的唯一标识，推荐使用具备业务意义的 ID，默认使用自动生成的 UUID。\n\n### markup\n\n`markup` 指定了渲染节点/边时使用的 SVG/HTML 片段，使用 JSON 格式描述。例如内置节点 `Shape.Rect` 的 `markup` 定义如下：\n    \n    \n    {\n      markup: [\n        {\n          tagName: 'rect',\n          selector: 'body',\n        }, \n        {\n          tagName: 'text',\n          selector: 'label',\n        },\n      ],\n    }\n\n表示该节点内部包含 `<rect>` 和 `<text>` 两个 SVG 元素，渲染到页面之后，节点对应的 SVG 元素看起来像下面这样。\n    \n    \n    <g data-cell-id=\"c2e1dd06-15c6-43a4-987a-712a664b8f85\" class=\"x6-cell x6-node\" transform=\"translate(40,40)\">\n      <rect fill=\"#fff\" stroke=\"#000\" stroke-width=\"2\" fill-opacity=\"0.5\" width=\"100\" height=\"40\"></rect>\n      <text font-size=\"14\" xml:space=\"preserve\" fill=\"#333\" text-anchor=\"middle\" font-family=\"Arial, helvetica, sans-serif\" transform=\"matrix(1,0,0,1,50,20)\">\n        <tspan dy=\"0.3em\" class=\"v-line\">rect</tspan>\n      </text>\n    </g>\n\n通过上面的介绍，我们大致了解了 `Markup` 的结构，下面我们将详细介绍 `Markup` 定义。\n    \n    \n    interface Markup {\n      tagName: string\n      ns?: string\n      selector?: string\n      groupSelector?: string | string[]\n      attrs?: { [key: string]: string | number }\n      style?: { [key: string]: string | number }\n      className?: string | string[]\n      textContent?: string\n      children?: Markup[]\n    }\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \ntagName| string| | ✓| SVG/HTML 元素标签名。  \nns| string| `\"http://www.w3.org/2000/svg\"`| | SVG/HTML 元素命名空间。  \nselector| string| -| | 该元素的选择器（唯一），通过选择器来定位该元素或为该元素指定属性样式。  \ngroupSelector| string| -| | 该元素的群组选择器，可以同时为该群组对应的多个元素指定样式。  \nattrs| Attr.SimpleAttrs| -| | 该元素的默认属性键值对。  \nstyle| JQuery.PlainObject<string | number>| -| | 该元素的行内样式键值对。  \nclassName| string| -| | 该元素的 CSS 样式名。  \ntextContent| string| -| | 该元素的文本内容。  \nchildren| Markup[]| -| | 嵌套的子元素。  \n  \n#### tagName\n\n通过 `tagName` 指定需要创建哪种 SVG/HTML 元素。\n\n#### ns\n\n该元素的命名空间。需要与 `tagName` 指定的的元素类型对应，默认使用 SVG 元素命名空间 `\"http://www.w3.org/2000/svg\"`。\n\n  * SVG 元素命名空间为 `\"http://www.w3.org/2000/svg\"`\n  * HTML 元素的命名空间为 `\"http://www.w3.org/1999/xhtml\"`\n\n\n\n#### selector\n\n该元素的唯一选择器，通过选择器为该元素指定[属性样式](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Fills_and_Strokes)。例如，为内置节点 `Shape.Rect` 指定 `<rect>` 和 `<text>` 元素的属性样式：\n    \n    \n    const rect = new Shape.Rect({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      attrs: {\n        // 指定 rect 元素的样式\n        body: { \n          stroke: '#000', // 边框颜色\n          fill: '#fff',   // 填充颜色\n        },\n        // 指定 text 元素的样式\n        label: { \n          text: 'rect', // 文字\n          fill: '#333', // 文字颜色\n        },\n      },\n    })\n\n#### groupSelector\n\n该元素的群组选择器，通过群组选择器可以为该群组关联的多个元素指定样式。例如，下面 Markup 中两个 `<rect>` 具备相同的 `groupSelector` 值 `'group1'`：\n    \n    \n    {\n      markup: [\n        {\n          tagName: 'rect',\n          selector: 'body',\n          groupSelector: 'group1',\n        }, \n        {\n          tagName: 'rect',\n          selector: 'wrap',\n          groupSelector: 'group1',\n        }, \n        {\n          tagName: 'text',\n          selector: 'label',\n        },\n      ],\n    }\n\n创建节点时，我们可以像下面这样来指定群组样式：\n    \n    \n    new SomeNode({\n      attrs: { \n        group1: {\n          fill: '#2ECC71',\n        },\n      },\n    })\n\n#### attrs\n\n该元素的默认属性键值对，通常用于定义那些不变的通用属性，这些默认属性也可以在实例化节点时被覆盖。需要注意的是 `markup` 中的 `attrs` 属性只支持原生的 SVG 属性，也就是说 X6 的在这里不可用。 \n\n例如，我们为内置节点 `Shape.Rect` 的 `<rect>` 和 `<text>` 元素指定了如下默认属性：\n    \n    \n    {\n      markup: [\n        {\n          tagName: 'rect',\n          selector: 'body',\n          attrs: {\n            fill: '#fff',\n            stroke: '#000',\n            strokeWidth: 2,\n          }\n        }, \n        {\n          tagName: 'text',\n          selector: 'label',\n          attrs: {\n            fill: '#333',\n            textAnchor: 'middle',\n            textVerticalAnchor: 'middle',\n          }\n        },\n      ],\n    }\n\n#### style\n\n该元素的行内样式键值对。\n\n#### className\n\n该元素的 CSS 样式名。\n\n#### textContent\n\n该元素的文本内容。\n\n#### children\n\n嵌套的子元素。\n\n### attrs\n\n属性选项 `attrs` 是一个复杂对象，该对象的 Key 是节点 Markup 定义中元素的选择器([selector](https://x6.antv.vision/zh/docs/api/model/cell/#selector))，对应的值是应用到该 SVG 元素的 [SVG 属性值](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute)(如 [fill](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/fill) 和 [stroke](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/stroke))，如果你对 SVG 属性还不熟悉，可以参考 MDN 提供的[填充和边框](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Fills_and_Strokes)入门教程。\n\n例如，内置节点 `Shape.Rect` 的 Markup 定义了 `'body'`(代表 `<rect>` 元素) 和 `'label'`(代表 `<text>` 元素) 两个选择器，我们可以像下面这样为该节点中的元素指定属性样式：\n    \n    \n    const rect = new Shape.Rect({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      attrs: { \n        body: {\n          fill: '#2ECC71',\n          stroke: '#000',\n        },\n        label: {\n          text: 'rect',\n          fill: '#333',\n          fontSize: 13,\n        },\n      },\n    })\n\n节点渲染到画布后的 DOM 结构看起来像下面这样：\n    \n    \n    <g data-cell-id=\"3ee1452c-6d75-478d-af22-88e03c6d513b\" class=\"x6-cell x6-node\" transform=\"translate(40,40)\">\n      <rect fill=\"#2ECC71\" stroke=\"#000\" stroke-width=\"2\" width=\"100\" height=\"40\"></rect>\n      <text font-size=\"13\" xml:space=\"preserve\" fill=\"#333\" text-anchor=\"middle\" font-family=\"Arial, helvetica, sans-serif\" transform=\"matrix(1,0,0,1,50,20)\">\n        <tspan dy=\"0.3em\" class=\"v-line\">\n          rect\n        </tspan>\n      </text>\n    </g>\n\n另外，我们还可以使用 CSS 选择器来指定节点样式，这样我们就不用记住预定义的选择器名称，只需要根据渲染后的 DOM 结构来定义样式即可。使用 CSS 选择器时需要注意，指定的 CSS 选择器可能选中多个元素，这时对应的属性样式将同时应用到多个元素上。\n    \n    \n    const rect = new Shape.Rect({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      attrs: { \n        rect: { // 使用 rect 这个 css 选择器替代预定义的 body 选择器\n          fill: '#2ECC71',\n          stroke: '#000',\n        },\n        text: { // 使用 text 这个 css 选择器替代预定义的 label 选择器\n          text: 'rect',\n          fill: '#333',\n          fontSize: 13,\n        },\n      },\n    })\n\n值得一提的是，支持使用[小驼峰(camelCase)格式](https://zh.wikipedia.org/zh-cn/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB)的属性名，如 `'fontSize'`，这就避免了 `'font-size'` 这种属性名作为对象 Key 时需要加引号的麻烦。\n\n除了标准的 [SVG 属性](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute)，我们在 X6 中还定义了一系列特殊属性，详情请参考[如何使用特殊属性](https://x6.antv.vision/zh/docs/tutorial/intermediate/attrs#gatsby-focus-wrapper)和[如何自定义属性](https://x6.antv.vision/zh/docs/api/model/cell/#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7)。另外，我们还可以使用 [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) 来定制样式，节点和边渲染到画布后分别有 `'x6-node'` 和 `'x6-edge'` 两个样式名，默认的样式定义[参考这里](https://github.com/antvis/X6/blob/master/packages/x6/src/index.less#L26-L156)。例如，我们可以像下面这样来指定节点中 `<rect>` 元素的样式：\n    \n    \n    .x6-node rect {\n      fill: #2ECC71;\n      stroke: #000;\n    }\n\n创建节点/边后，我们可以调用实例上的 `attr()` 方法来修改节点属性样式。看下面代码，通过 `/` 分割的路径修改样式，`label` 选择器对应到 `<text>` 元素，`text` 则是该元素的属性名，`'hello'` 是新的属性值。\n    \n    \n    rect.attr('label/text', 'hello')\n    \n    // 等同于\n    rect.attr('label', {\n      text: 'hello'\n    })\n    \n    // 等同于\n    rect.attr({\n      label: {\n        text: 'hello'\n      }\n    })\n\n当传入的属性值为 `null` 时可以移除该属性。\n    \n    \n    rect.attr('label/text', null)\n\n### shape\n\n节点/边的图形，图形类似 MVC 模式中的 Model，决定了节点/边的结构化数据。该选项通常在使用 `graph.addNode` 和 `graph.addEdge` 两个方法添加节点和边时使用。\n    \n    \n    const rect = graph.addNode({\n      shape: 'rect',\n      x: 100,\n      y: 200,\n      width: 80,\n      height: 40,\n      label: 'rect', \n    })\n    \n    const circle = graph.addNode({\n      shape: 'circle',\n      x: 280,\n      y: 200,\n      width: 60,\n      height: 60,\n      label: 'circle', \n    })\n    \n    const edge = graph.addEdge({\n      shape: 'edge',\n      source: rect,\n      target: circle,\n    })\n\n在 X6 内部实现中，我们通过 `shape` 指定的图形找到对应的构造函数来初始化节点/边，并将其添加到画布。\n\n该选项的默认值为： \n\n  * `graph.addNode` 方法中 `shape` 的默认值为 `'rect'`\n  * `graph.addEdge` 方法中 `shape` 的默认值为 `'edge'`\n\n\n\n同时，我们在 X6 中[内置](https://x6.antv.vision/zh/docs/tutorial/basic/cell#%E5%86%85%E7%BD%AE%E8%8A%82%E7%82%B9)了一系列节点和边。\n\n内置节点构造函数与 `shape` 名称对应关系如下表。\n\n构造函数| shape 名称| 描述  \n---|---|---  \nShape.Rect| rect| 矩形。  \nShape.Circle| circle| 圆形。  \nShape.Ellipse| ellipse| 椭圆。  \nShape.Polygon| polygon| 多边形。  \nShape.Polyline| polyline| 多段线。  \nShape.Path| path| 路径。  \nShape.Image| image| 图片。  \nShape.HTML| html| HTML 节点，使用 `foreignObject` 渲染 HTML 片段。  \nShape.TextBlock| text-block| 文本节点，使用 `foreignObject` 渲染文本。  \nShape.BorderedImage| image-bordered| 带边框的图片。  \nShape.EmbeddedImage| image-embedded| 内嵌入矩形的图片。  \nShape.InscribedImage| image-inscribed| 内嵌入椭圆的图片。  \nShape.Cylinder| cylinder| 圆柱。  \n  \n内置边构造函数与 `shape` 名称对应关系如下表。\n\n构造函数| shape 名称| 描述  \n---|---|---  \nShape.Edge| edge| 边。  \nShape.DoubleEdge| double-edge| 双线边。  \nShape.ShadowEdge| shadow-edge| 阴影边。  \n  \n除了使用 X6 的内置节点/边，我们还可以注册自定义节点/边并使用他们，想了解更多请参考[自定义节点](https://x6.antv.vision/zh/docs/tutorial/intermediate/custom-node)和[自定义边](https://x6.antv.vision/zh/docs/tutorial/intermediate/custom-edge)教程。\n\n### view\n\n指定渲染节点/边所使用的视图，视图的概念与 MVC 模式中的 View 一致。\n\n### zIndex\n\n节点/边在画布中的层级，默认根据节点/边添加顺序自动确定。节点/边渲染到画布后可以通过 `cell.getZIndex()` 和 `cell.setZIndex(z: number)` 来获取或设置 `zIndex` 的值，也可以调用 `cell.toFront()` 和 `cell.toBack()` 来将其移到最顶层或最底层。\n\n### visible\n\n节点/边是否可见，默认可见。\n\n### parent\n\n父节点 ID。\n\n### children\n\n子节点/边的 ID 数组。\n\n### tools\n\n节点/边的小工具。小工具可以增强节点/边的交互能力，我们分别为节点和边提供了以下内置工具：\n\n节点\n\n  * [button](https://x6.antv.vision/zh/docs/api/registry/node-tool#button) 在指定位置处渲染一个按钮，支持自定义按钮的点击交互。\n  * [button-remove](https://x6.antv.vision/zh/docs/api/registry/node-tool#button-remove) 在指定的位置处，渲染一个删除按钮，点击时删除对应的节点。\n  * [boundary](https://x6.antv.vision/zh/docs/api/registry/node-tool#boundary) 根据节点的包围盒渲染一个包围节点的矩形。注意，该工具仅仅渲染一个矩形，不带任何交互。\n\n\n\n边\n\n  * [vertices](https://x6.antv.vision/zh/docs/api/registry/edge-tool#vertices) 路径点工具，在路径点位置渲染一个小圆点，拖动小圆点修改路径点位置，双击小圆点删除路径点，在边上单击添加路径点。\n  * [segments](https://x6.antv.vision/zh/docs/api/registry/edge-tool#segments) 线段工具。在边的每条线段的中心渲染一个工具条，可以拖动工具条调整线段两端的路径点的位置。\n  * [boundary](https://x6.antv.vision/zh/docs/api/registry/edge-tool#boundary) 根据边的包围盒渲染一个包围边的矩形。注意，该工具仅仅渲染一个矩形，不带任何交互。\n  * [button](https://x6.antv.vision/zh/docs/api/registry/edge-tool#button) 在指定位置处渲染一个按钮，支持自定义按钮的点击交互。\n  * [button-remove](https://x6.antv.vision/zh/docs/api/registry/edge-tool#button-remove) 在指定的位置处，渲染一个删除按钮，点击时删除对应的边。\n  * [source-arrowhead-和-target-arrowhead](https://x6.antv.vision/zh/docs/api/registry/edge-tool#source-arrowhead-%E5%92%8C-target-arrowhead) 在边的起点或终点渲染一个图形(默认是箭头)，拖动该图形来修改边的起点或终点。\n\n\n\n可以指定单个工具：\n    \n    \n    graph.addNode({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      tools: 'button-remove' // or { name: 'button-remove' }\n    })\n\n同时，可以像下面这样指定工具的参数选项：\n    \n    \n    graph.addNode({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      tools: { \n        name: 'button-remove',\n        args: {\n          x: 10, // 按钮的 x 坐标，相对于节点的左上角\n          y: 10, // 按钮的 y 坐标，相对于节点的左上角\n        },\n      },\n    })\n\n也可以同时指定多个小工具：\n    \n    \n    graph.addNode({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      tools: [\n        'button-remove',\n        {\n          name: 'boundary',\n          args: {\n            padding: 5,\n          },\n        },\n      ],\n    })\n\n另外，还可以为工具集指定一个名称，后续可以通过 [`cell.hasTools(name)`](https://x6.antv.vision/zh/docs/api/model/cell/#hastools) 方法来判断节点/边中是否包含指定名称的工具集。\n    \n    \n    graph.addNode({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      tools: {\n        name: 'onhover', // 工具集名称\n        items: [         // 通过 items 来指定包含哪些小工具\n          'button-remove',\n          {\n            name: 'boundary',\n          },\n        ],\n      },\n    })\n\n### data\n\n与节点/边关联的业务数据。例如，我们在实际使用时通常会将某些业务数据存在节点/边的 `data` 上。\n    \n    \n    const rect = new Shape.Rect({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      data: { \n        bizID: 125,\n        date: '20200630',\n        price: 89.00,\n      }\n    })\n\n## prototype\n\n### 通用\n\n#### get model\n\n获取节点/边所属的 [Model](https://x6.antv.vision/zh/docs/api/graph/model)，当节点/边被添加到画布时将自动确定。\n    \n    \n    const rect = new Shape.Rect({\n      x: 30,\n      y: 30,\n      width: 100,\n      height: 40,\n    })\n    \n    // 刚刚创建的节点 model 为空。\n    console.log(rect.model) // undefined\n    \n    graph.addNode(rect)\n    \n    // 节点添加到画布后自动为其指定对应的 Model。\n    console.log(rect.model) // Model 实例\n\n#### get shape\n\n获取节点/边的图形，返回注册到 X6 的图形的名称。图形与 MVC 模式中 Model 的概念一致，决定了节点/边的结构化数据。\n    \n    \n    if (node.shape === 'rect') {\n      // do something if the node is a 'rect' node.\n    }\n\n#### get view\n\n获取节点/边的视图，返回注册到 X6 的视图的名称。视图与 MVC 模式中 View 的概念一致，决定了节点/边的渲染和更新逻辑。\n    \n    \n    if (node.view === 'rect') {\n      // do something if the node is a 'rect' view.\n    }\n\n#### isNode()\n    \n    \n    isNode(): boolean\n\n检测实例是不是 [Node](https://x6.antv.vision/zh/docs/api/model/node) 实例，如果是 [Node](https://x6.antv.vision/zh/docs/api/model/node) 实例则返回 `true`，否则返回 `false`。所有继承自 [Node](https://x6.antv.vision/zh/docs/api/model/node) 的节点都返回 `true`。\n    \n    \n    if (cell.isNode()) {\n      // do something if the cell is a node.\n    }\n\n#### isEdge()\n    \n    \n    isEdge(): boolean\n\n检测实例是不是 [Edge](https://x6.antv.vision/zh/docs/api/model/edge) 实例，如果是 [Edge](https://x6.antv.vision/zh/docs/api/model/edge) 实例则返回 `true`，否则返回 `false`。所有继承自 [Edge](https://x6.antv.vision/zh/docs/api/model/edge) 的边都返回 `true`。\n    \n    \n    if (cell.isEdge()) {\n      // do something if the cell is an edge.\n    }\n\n#### toJSON(...)\n    \n    \n    toJSON(options?: Cell.ToJSONOptions): Object\n\n将节点/边的结构化数据转换为 JSON 数据，以便做持久化存储（通常我们通过调用 `graph.toJSON` 来导出整个画布的数据）。\n\n参数\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \noptions.diff| boolean| `false`| | 是否返回与默认值相比具有差异的那些数据。  \n  \n返回值\n\n  * 当 `options.diff` 为 `false` 时，返回完整数据。\n  * 当 `options.diff` 为 `true` 时，返回差异数据。\n\n\n\n#### clone(...)\n    \n    \n    clone(options?: Cell.CloneOptions): Cell | Node | Edge | { [id:string]: Node | Edge }\n\n克隆节点/边。\n\n参数\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \noptions.deep| boolean| `false`| | 是否克隆子孙节点和边，默认为 `false` 表示只克隆自身。  \n  \n返回值\n\n  * 当 `options.deep` 为 `false` 时，返回通克隆创建的新节点/边。\n  * 当 `options.deep` 为 `true` 时，返回一个对象，对象的 Key 是被克隆节点/边的 ID，对象的 Value 是克隆出来的节点/边。\n\n\n\n#### on(...)\n    \n    \n    on(name: string, handler: Events.Handler, context?: any): this\n\n监听事件。\n\n参数\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \nname| string| | ✓| 事件名称。  \nhandler| Events.Handler| | ✓| 回调函数。  \ncontext| any| | | 回调函数的调用上下文。  \n  \n#### once(...)\n    \n    \n    once(name: string, handler: Events.Handler, context?: any): this\n\n监听一次事件，当事件被触发后自动删除该监听。\n\n参数\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \nname| string| | ✓| 事件名称。  \nhandler| Events.Handler| | ✓| 回调函数。  \ncontext| any| | | 回调函数的调用上下文。  \n  \n#### off(...)\n    \n    \n    /**\n     * 删除所有事件监听。\n     */\n    off(): this\n    \n    /**\n     * 删除指定 name 的所有事件监听。\n     */\n    off(name: string): this\n    \n    /**\n     * 删除指定 handler 对应的事件监听。\n     */\n    off(name: null, handler: Events.Handler): this\n    \n    /**\n     * 删除指定 name 和 handler 的事件监听。\n     */\n    off(name: string, handler: Events.Handler, context?: any): this\n\n删除事件监听。\n\n#### trigger(...)\n    \n    \n    trigger(name: string, ...args?: any[]): boolean | Promise<boolean>\n\n触发事件。\n\n参数\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \nname| string| | ✓| 事件名称。  \n...args| any[]| | | 传给回调函数的参数。  \n  \n返回值\n\n  * 当回调函数都是同步函数时，只要某个回调函数返回 `false` 时就返回 `false`，否则返回 `true`。\n  * 当回调函数中存在异步函数时，按照同步回调的判断逻辑，返回 `Promise<boolean>`。\n\n\n\n#### dispose()\n    \n    \n    dispose(): void\n\n销毁并从父节点中移除节点/边。\n\n### 标签结构 markup\n\n指定了渲染节点/边时使用的 SVG/HTML 结构，使用 [JSON 格式描述](https://x6.antv.vision/zh/docs/api/model/cell/#markup)，通常在定义节点/边时通过 方法将其设置为所有实例共享。当修改 `markup` 时，将触发 `'change:markup'` 事件和画布重绘。\n\n#### get markup\n\n获取 `markup`。\n    \n    \n    const markup = cell.markup\n\n#### set markup\n\n设置 `markup`，并触发 `'change:markup'` 事件和画布重绘。\n    \n    \n    cell.markup = markup\n\n#### getMarkup()\n    \n    \n    getMarkup(): Markup\n\n获取 `markup`。\n    \n    \n    const markup = cell.getMarkup()\n\n#### setMarkup(...)\n    \n    \n    setMarkup(markup: Markup, options?: Cell.SetOptions): this\n\n设置 `markup`。\n\n默认情况触发 `'change:markup'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:markup'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nmarkup| [Markup](https://x6.antv.vision/zh/docs/api/model/cell/#markup)| ✓| |   \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:markup'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，设置 `markup` 时，触发 `'change:markup'` 事件和画布重绘：\n    \n    \n    cell.setMarkup(markup)\n\n当 `options.silent` 为 `true` 时，不触发 `'change:markup'` 事件和画布重绘：\n    \n    \n    cell.setMarkup(markup, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.setMarkup(markup, { otherKey: 'otherValue', ... })\n\n#### removeMarkup(...)\n    \n    \n    removeMarkup(options?: Cell.SetOptions): this\n\n删除 `markup`。\n\n默认情况触发 `'change:markup'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:markup'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:markup'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，删除 `markup` 时，触发 `'change:markup'` 事件和画布重绘：\n    \n    \n    cell.removeMarkup()\n\n当 `options.silent` 为 `true` 时，不触发 `'change:markup'` 事件和画布重绘：\n    \n    \n    cell.removeMarkup({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.removeMarkup({ otherKey: 'otherValue', ... })\n\n### 元素属性 attrs\n\n属性 `attrs` 是一个[复杂对象](https://x6.antv.vision/zh/docs/api/model/cell/#attrs-1)，当修改 `attrs` 时，将触发 `'change:attrs'` 事件和画布重绘。\n\n#### get attrs\n\n获取属性。\n    \n    \n    const atts = cell.attrs\n\n#### set attrs\n\n设置属性，并触发 `'change:attrs'` 事件和画布重绘。\n    \n    \n    cell.atts = attrs\n\n#### getAttrs()\n    \n    \n    getAttrs(): Attr.CellAttrs\n\n获取属性。\n    \n    \n    const atts = cell.getAttrs()\n\n#### setAttrs(...)\n    \n    \n    setAttrs(attrs: Attr.CellAttrs, options?: Cell.SetAttrOptions): this\n\n设置属性，默认情况触发 `'change:attrs'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nattrs| Attr.CellAttrs | null | undefined| ✓| |   \noptions.overwrite| boolean| | `false`| 为 `true` 时替换现有属性，否则根据 `options.deep` 选项进行深度或浅度 merge。  \noptions.deep| boolean| | `true`| 当 `options.overwrite` 为 `false` 时有效， 为 `true` 时进行深度 merge，否则进行浅 merge。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，指定的属性将与旧属性进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)：\n    \n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n    \n    cell.setAttrs({\n      body: { fill: '#f5f5f5' },\n      label: { text: 'My Label' },\n    })\n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#f5f5f5' },\n    //   label: { fill: '#333333', text: 'My Label' },\n    // }\n\n当 `options.deep` 为 `false` 时，进行浅 merge：\n    \n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n    \n    cell.setAttrs(\n      { label: { text: 'My Label' } }, \n      { deep: false },\n    )\n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { text: 'My Label' },\n    // }\n\n当 `options.overwrite` 为 `true` 时，直接替换旧属性：\n    \n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n    \n    cell.setAttrs(\n      { label: { text: 'My Label' } }, \n      { overwrite: true },\n    )\n    \n    console.log(cell.getAttrs())\n    // {\n    //   label: { text: 'My Label' },\n    // }\n\n当 `options.silent` 为 true 时不触发 `'change:attrs'` 事件和画布重绘。\n    \n    \n    cell.setAttrs(myAttrs, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用。\n    \n    \n    cell.setAttrs(myAttrs, { otherKey: 'otherValue', ... })\n\n#### replaceAttrs(...)\n    \n    \n    replaceAttrs(attrs: Attr.CellAttrs, options: Cell.SetOptions = {}): this\n\n用给定的属性替换原有属性，相当于调用 `setAttrs(attrs, { ...options, overwrite: true })`。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nattrs| Attr.CellAttrs | null | undefined| ✓| |   \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### updateAttrs(...)\n    \n    \n    updateAttrs(attrs: Attr.CellAttrs, options: Cell.SetOptions = {}): this\n\n使用浅 merge 更新属性，相当于调用 `setAttrs(attrs, { ...options, deep: false })`。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nattrs| Attr.CellAttrs | null | undefined| ✓| |   \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeAttrs(...)\n    \n    \n    removeAttrs(options?: Cell.SetOptions): this\n\n删除属性。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，删除 `attrs` 时，触发 `'change:attrs'` 事件和画布重绘：\n    \n    \n    cell.removeAttrs()\n\n当 `options.silent` 为 `true` 时，不触发 `'change:attrs'` 事件和画布重绘：\n    \n    \n    cell.removeAttrs({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.removeAttrs({ otherKey: 'otherValue', ... })\n\n#### getAttrByPath(...)\n    \n    \n    getAttrByPath<T>(path?: string | string[]): T\n\n根据属性路径获取属性值。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| | | 属性路径。   \n当 `path` 为 `string` 类型时，路径是以 `'\\'` 分割的字符串。   \n当 `path` 为 `string[]` 类型时，路径是属性对象路径上的 Key 构成的数组。  \n  \n用法\n\n某节点的属性值如下：\n    \n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n\n当路径为空时返回全部属性：\n    \n    \n    console.log(cell.getAttrByPath())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n\n通过字符串路径获取属性值：\n    \n    \n    console.log(cell.getAttrByPath('body'))\n    // { fill: '#ffffff' }\n    \n    console.log(cell.getAttrByPath('body/fill'))\n    // '#ffffff'\n    \n    console.log(cell.getAttrByPath('unkonwn'))\n    // undefined\n    \n    console.log(cell.getAttrByPath('body/unkonwn'))\n    // undefined\n\n通过属性对象的 Key 数组构成的路径获取属性值：\n    \n    \n    console.log(cell.getAttrByPath(['body']))\n    // { fill: '#ffffff' }\n    \n    console.log(cell.getAttrByPath(['body', 'fill']))\n    // '#ffffff'\n    \n    console.log(cell.getAttrByPath(['unkonwn']))\n    // undefined\n    \n    console.log(cell.getAttrByPath(['body', 'unkonwn']))\n    // undefined\n\n#### setAttrByPath(...)\n    \n    \n    setAttrByPath(path: string | string[], value: Attr.ComplexAttrValue, options?: Cell.SetOptions): this\n\n根据属性路径设置属性值。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 属性路径。   \n当 `path` 为 `string` 类型时，路径是以 `'\\'` 分割的字符串。   \n当 `path` 为 `string[]` 类型时，路径是属性对象路径上的 Key 构成的数组。  \nvalue| Attr.ComplexAttrValue| ✓| | 新属性值。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n某节点的初始属性值如下：\n    \n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n\n通过字符串路径获取属性值：\n    \n    \n    cell.setAttrByPath('body', { stroke: '#000000' }) // 替换 body 属性值\n    console.log(cell.getAttrs())\n    // {\n    //   body: { stroke: '#000000' },\n    //   label: { fill: '#333333' },\n    // }\n    \n    cell.setAttrByPath('body/fill', '#f5f5f5') // 设置 body.fill 属性值\n    console.log(cell.getAttrs())\n    // {\n    //   body: { stroke: '#000000', fill: '#f5f5f5' },\n    //   label: { fill: '#333333' },\n    // }\n\n或者通过属性对象的 Key 数组构成的路径获取属性值：\n    \n    \n    cell.setAttrByPath(['body'], { stroke: '#000000' }) // 替换 body 属性值\n    console.log(cell.getAttrs())\n    // {\n    //   body: { stroke: '#000000' },\n    //   label: { fill: '#333333' },\n    // }\n    \n    cell.setAttrByPath(['body', 'fill'], '#f5f5f5') // 设置 body.fill 属性值\n    console.log(cell.getAttrs())\n    // {\n    //   body: { stroke: '#000000', fill: '#f5f5f5' },\n    //   label: { fill: '#333333' },\n    // }\n\n当 `options.silent` 为 true 时不触发 `'change:attrs'` 事件和画布重绘。\n    \n    \n    cell.setAttrByPath('body', { stroke: '#000000' }, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用。\n    \n    \n    cell.setAttrByPath('body', { stroke: '#000000' }, { otherKey: 'otherValue', ... })\n\n#### removeAttrByPath(...)\n    \n    \n    removeAttrByPath(path: string | string[], options?: Cell.SetOption ): this\n\n删除指定路径的属性值。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 属性路径。   \n当 `path` 为 `string` 类型时，路径是以 `'\\'` 分割的字符串。   \n当 `path` 为 `string[]` 类型时，路径是属性对象路径上的 Key 构成的数组。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n某节点的初始属性值如下：\n    \n    \n    console.log(cell.getAttrs())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n\n通过字符串路径删除属性值：\n    \n    \n    cell.removeAttrByPath('body/fill')\n    console.log(cell.getAttrs())\n    // {\n    //   body: { },\n    //   label: { fill: '#333333' },\n    // }\n    \n    cell.removeAttrByPath('body')\n    console.log(cell.getAttrs())\n    // {\n    //   label: { fill: '#333333' },\n    // }\n\n或者通过属性对象的 Key 数组构成的路径删除属性值：\n    \n    \n    cell.removeAttrByPath(['body', 'fill'])\n    console.log(cell.getAttrs())\n    // {\n    //   body: { },\n    //   label: { fill: '#333333' },\n    // }\n    \n    cell.removeAttrByPath(['body'])\n    console.log(cell.getAttrs())\n    // {\n    //   label: { fill: '#333333' },\n    // }\n\n当 `options.silent` 为 `true` 时，不触发 `'change:attrs'` 事件和画布重绘：\n    \n    \n    cell.removeAttrByPath('body/fill', { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.removeAttrByPath('body/fill', { otherKey: 'otherValue', ... })\n\n#### attr(...)\n    \n    \n    /**\n     * 获取属性。\n     */\n    attr(): Cell.CellAttrs\n    \n    /**\n     * 获取指定路径上的属性值。\n     */\n    attr<T>(path: string | string[]): T\n    \n    /**\n     * 设置指定路径上的属性值。\n     */\n    attr(path: string | string[], value: Attr.ComplexAttrValue | null, options?: Cell.SetOptions): this\n    \n    /**\n     * 设置属性值，传入的属性与旧属性进行深度 merge。\n     */\n    attr(attrs: Attr.CellAttrs, options?: Cell.SetOptions): this\n\n该方法是 [`getAttrByPath`](https://x6.antv.vision/zh/docs/api/model/cell/#getattrbypath)、[`setAttrByPath`](https://x6.antv.vision/zh/docs/api/model/cell/#setattrbypath) 和 [`setAttrs`](https://x6.antv.vision/zh/docs/api/model/cell/#setattrs) 三个方法的整合，提供了上面四种函数签名，是一个非常实用的方法。\n\n用法\n\n获取全部属性值：\n    \n    \n    console.log(cell.attr())\n    // {\n    //   body: { fill: '#ffffff' },\n    //   label: { fill: '#333333' },\n    // }\n\n获取指定路径上的属性值：\n    \n    \n    console.log(cell.attr('body/fill'))\n    // '#ffffff' \n\n设置指定路径上的属性值：\n    \n    \n    cell.attr('body/fill', '#f5f5f5')\n    console.log(cell.attr())\n    // {\n    //   body: { fill: '#f5f5f5' },\n    //   label: { fill: '#333333' },\n    // }\n\n通过属性对象设置属性值，与就属性对象进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)。\n    \n    \n    cell.attr({\n      body: { stroke: '#000000' },\n      label: { fill: 'blue', text: 'my lable' },\n    })\n    console.log(cell.attr())\n    // {\n    //   body: { fill: '#f5f5f5', stroke: '#000000' },\n    //   label: { fill: 'blue', text: 'my lable' },\n    // }\n\n### 层级 zIndex\n\n`zIndex` 是节点/边在画布中的层级，默认根据节点/边添加顺序自动确定。当修改 `zIndex` 时，将触发 `'change:zIndex'` 事件和画布重绘。\n\n#### get zIndex\n\n获取 `zIndex`。\n    \n    \n    const z = cell.zIndex\n\n#### set zIndex\n\n设置 `zIndex`，触发 `'change:zIndex'` 事件和画布重绘。\n    \n    \n    cell.zIndex = 2\n\n#### getZIndex()\n    \n    \n    getZIndex(): number\n\n获取 `zIndex`。\n    \n    \n    const z = cell.getZIndex()\n\n#### setZIndex(...)\n    \n    \n    setZIndex(zIndex: number, options?: Cell.SetOptions): this\n\n设置 `zIndex`。\n\n默认情况触发 `'change:zIndex'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:zIndex'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nzIndex| number| ✓| |   \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:zIndex'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，设置 `zIndex` 时，触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.setZIndex(2)\n\n当 `options.silent` 为 `true` 时，不触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.setZIndex(2, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.setZIndex(2, { otherKey: 'otherValue', ... })\n\n#### removeZIndex(...)\n    \n    \n    removeZIndex(options?: Cell.SetOptions): this\n\n删除 `zIndex`。\n\n默认情况触发 `'change:zIndex'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:zIndex'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:zIndex'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，删除 `zIndex` 时，触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.removeZIndex()\n\n当 `options.silent` 为 `true` 时，不触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.removeZIndex({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.removeZIndex({ otherKey: 'otherValue', ... })\n\n#### toFront(...)\n    \n    \n    toFront(options?: Cell.ToFrontOptions): this\n\n将节点/边移到最顶层。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.deep| boolean| | `false`| 为 `true` 时同时更新所有子节点/边的层级。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:zIndex'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，更新 `zIndex` 时，触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.toFront()\n\n当 `options.deep` 为 `true` 时，同时更新所有子节点/边的层级。：\n    \n    \n    cell.toFront({ deep: true })\n\n当 `options.silent` 为 `true` 时，不触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.toFront({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.toFront({ otherKey: 'otherValue', ... })\n\n#### toBack(...)\n    \n    \n    toBack(options?: Cell.ToBackOptions): this\n\n将节点/边移到最底层。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.deep| boolean| | `false`| 为 `true` 时同时更新所有子节点/边的层级。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:zIndex'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，更新 `zIndex` 时，触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.toBack()\n\n当 `options.deep` 为 `true` 时，同时更新所有子节点/边的层级。：\n    \n    \n    cell.toBack({ deep: true })\n\n当 `options.silent` 为 `true` 时，不触发 `'change:zIndex'` 事件和画布重绘：\n    \n    \n    cell.toBack({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.toBack({ otherKey: 'otherValue', ... })\n\n### 可见性 Visible\n\n#### get visible\n\n返回节点/边是否可见。\n    \n    \n    if (cell.visible) {\n      // do something\n    }\n\n#### set visible\n\n设置节点/边是否可见，并触发 `'change:visible'` 事件和画布重绘。\n\n#### show(...)\n    \n    \n    show(options?: Cell.SetOptions): this\n\n显示节点/边。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:visible'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，显示节点/边时，触发 `'change:visible'` 事件和画布重绘：\n    \n    \n    cell.show()\n\n当 `options.silent` 为 `true` 时，不触发 `'change:markup'` 事件和画布重绘：\n    \n    \n    cell.show({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.show({ otherKey: 'otherValue', ... })\n\n#### hide(...)\n    \n    \n    hide(options?: Cell.SetOptions): this\n\n隐藏节点/边。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:visible'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，隐藏节点/边时，触发 `'change:visible'` 事件和画布重绘：\n    \n    \n    cell.hide()\n\n当 `options.silent` 为 `true` 时，不触发 `'change:visible'` 事件和画布重绘：\n    \n    \n    cell.hide({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.hide({ otherKey: 'otherValue', ... })\n\n#### isVisible()\n    \n    \n    isVisible(): boolean\n\n返回节点/边是否可见。\n    \n    \n    if (cell.isVisible()) {\n      // do something\n    }\n\n#### setVisible(...)\n    \n    \n    setVisible(visible: boolean, options?: Cell.SetOptions): this\n\n设置节点/边的可见性。\n\n默认情况触发 `'change:visible'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:visible'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nvisible| boolean| ✓| |   \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:visible'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，改变节点/边的可见性时，触发 `'change:visible'` 事件和画布重绘：\n    \n    \n    cell.setVisible(false)\n\n当 `options.silent` 为 `true` 时，不触发 `'change:visible'` 事件和画布重绘：\n    \n    \n    cell.setVisible(false, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.setVisible(false, { otherKey: 'otherValue', ... })\n\n#### toggleVisible(...)\n    \n    \n    toggleVisible(options?: Cell.SetOptions): this\n\n切换节点/边的可见性。\n\n默认情况触发 `'change:visible'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:visible'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:visible'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，切换节点/边的可见性时，触发 `'change:visible'` 事件和画布重绘：\n    \n    \n    cell.toggleVisible()\n\n当 `options.silent` 为 `true` 时，不触发 `'change:visible'` 事件和画布重绘：\n    \n    \n    cell.toggleVisible({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.toggleVisible({ otherKey: 'otherValue', ... })\n\n### 业务数据 Data\n\n与节点/边关联的业务数据。例如，我们在实际使用时通常会将某些业务数据存在节点/边的 data 上。\n    \n    \n    const rect = new Shape.Rect({\n      x: 40,\n      y: 40,\n      width: 100,\n      height: 40,\n      data: { \n        bizID: 125,\n        date: '20200630',\n        price: 89.00,\n      }\n    })\n\n#### get data\n\n获取关联的数据。\n\n#### set data\n\n设置关联的数据，并触发 `'change:data'` 事件和画布重绘。\n\n#### getData()\n    \n    \n    getData(): any\n\n获取关联的数据。\n\n#### setData(...)\n    \n    \n    setData(data: any, options?: Cell.SetDataOptions): this\n\n设置关联的业务数据。\n\n默认情况触发 `'change:data'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:data'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \ndata| any| ✓| |   \noptions.overwrite| boolean| | `false`| 为 `true` 时替换现有值，否则根据 `options.deep` 选项进行深度或浅度 merge。  \noptions.deep| boolean| | `true`| 当 `options.overwrite` 为 `false` 时有效， 为 `true` 时进行深度 merge，否则进行浅 merge。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:data'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n默认与原数据进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)，并触发 `'change:data'` 事件和画布重绘：\n    \n    \n    cell.setData(data)\n\n当 `options.overwrite` 为 `true` 时，替换旧数据：\n    \n    \n    cell.setData(data, { overwrite: true })\n\n当 `options.deep` 为 `false` 时，与原数据进行浅 merge：\n    \n    \n    cell.setData(data, { overwrite: true })\n\n当 `options.silent` 为 `true` 时，不触发 `'change:data'` 事件和画布重绘：\n    \n    \n    cell.setData(data, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.setData(data, { otherKey: 'otherValue', ... })\n\n#### replaceData(...)\n    \n    \n    replaceData(data: any, options: Cell.SetOptions = {}): this\n\n用指定的数据替换原数据，相当于调用 `setData(data, { ...options, overwrite: true })`。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \ndata| any| ✓| |   \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:data'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### updateData(...)\n    \n    \n    updateData(data: any, options: Cell.SetOptions = {}): this\n\n通过浅 merge 来更新数据，相当于调用 `setData(data, { ...options, deep: false })`。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \ndata| any| ✓| |   \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:data'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeData(...)\n    \n    \n    removeData(options: Cell.SetOptions): this\n\n删除数据。\n\n默认情况触发 `'change:data'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:data'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:data'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，删除 `data` 时，触发 `'change:data'` 事件和画布重绘：\n    \n    \n    cell.removeData()\n\n当 `options.silent` 为 `true` 时，不触发 `'change:data'` 事件和画布重绘：\n    \n    \n    cell.removeData({ silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.removeData({ otherKey: 'otherValue', ... })\n\n### 父子关系 Parent/Children\n\n#### get parent\n\n获取父节点。\n\n#### getParent()\n    \n    \n    getParent(): Cell | null\n\n获取父节点。\n\n返回值\n\n当父节点存在是返回父节点，否则返回 `null`。\n\n#### setParent(...)\n    \n    \n    setParent(parent: Cell | null, options?: Cell.SetOptions): this\n\n设置父节点。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nparent| Cell | null| ✓| | 父节点或 `null`，当 `parent` 为 `null` 时删除父节点。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:parent'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，当 `parent` 发生改变时，触发 `'change:parent'` 事件和画布重绘：\n    \n    \n    cell.setParent(parent)\n\n当 `parent` 为空时删除父节点：\n    \n    \n    cell.setParent(null)\n\n当 `options.silent` 为 `true` 时，不触发 `'change:parent'` 事件和画布重绘：\n    \n    \n    cell.setParent(parent, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.setParent(parent, { otherKey: 'otherValue', ... })\n\n#### getParentId()\n    \n    \n    getParentId(): string | undefined\n\n获取父节点的 ID。\n\n返回值\n\n当父节点存在是返回父节点的 ID，否则返回 `undefined`。\n\n#### hasParent()\n    \n    \n    hasParent(): boolean\n\n检查节点/边是否有父节点。\n\n用法\n    \n    \n    if (cell.hasParent()) {\n      // do something\n    }\n\n#### get children\n\n获取所有子节点/边。\n\n#### getChildren()\n    \n    \n    getChildren(): Cell[] | null\n\n获取所有子节点/边。\n\n#### setChildren()\n    \n    \n    setChildren(children: Cell[] | null, options?: Cell.SetOptions) \n\n设置子节点/边。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchildren| Cell[] | null| ✓| | 子节点/边数组或 `null`，当 `children` 为 `null` 时清空子节点/边。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况，当 `children` 发生改变时，触发 `'change:children'` 事件和画布重绘：\n    \n    \n    cell.setChildren(children)\n\n当 `children` 为 `null` 时清空子节点/边：\n    \n    \n    cell.setChildren(null)\n\n当 `options.silent` 为 `true` 时，不触发 `'change:children'` 事件和画布重绘：\n    \n    \n    cell.setChildren(children, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    cell.setChildren(children, { otherKey: 'otherValue', ... })\n\n#### isParentOf(...)\n    \n    \n    isParentOf(child: Cell | null): boolean\n\n返回当前节点是否是指定 Cell 的父节点。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchild| Cell | null| ✓| |   \n  \n#### isChildOf(...)\n    \n    \n    isChildOf(parent: Cell | null): boolean\n\n返回当前节点/边是否是指定节点的的子节点/边。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nparent| Cell | null| ✓| |   \n  \n#### eachChild(...)\n    \n    \n    eachChild(iterator: (child: Cell, index: number, children: Cell[]) => void, context?: any): this\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \niterator| (child: Cell, index: number, children: Cell[]) => void| ✓| | 迭代器函数。  \ncontext| any| | | 迭代器函数的执行上下文。  \n  \n遍历子节点。\n\n#### filterChild(...)\n    \n    \n    filterChild(iterator: (child: Cell, index: number, children: Cell[]) => boolean, context?: any): Cell[]\n\n过滤子节点。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \niterator| (child: Cell, index: number, children: Cell[]) => boolean| ✓| | 过滤器函数。  \ncontext| any| | | 过滤器函数的执行上下文。  \n  \n返回值\n\n返回满足过滤条件的子节点/边，或者空数组。\n\n#### getChildCount()\n    \n    \n    getChildCount(): number\n\n获取子节点/边的数量。\n\n返回值\n\n返回子节点/边的数量，当没有子节点/边时返回 `0`。\n\n#### getChildIndex(...)\n    \n    \n    getChildIndex(child: Cell): number\n\n获取子节点/边的索引。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchild| Cell| ✓| |   \n  \n返回值\n\n返回子节点/边的索引，当子节点不存在时返回 `-1`。\n\n#### getChildAt(...)\n    \n    \n    getChildAt(index: number): Cell | null\n\n获取指定索引位置的子节点/边。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 索引位置。  \n  \n返回值\n\n返回指定索引位置的子节点，当该节点不存在子节点/边、索引越界、子节点不存在时返回 `null`。\n\n#### getAncestors(...)\n    \n    \n    getAncestors(options?: { deep?: boolean }): Cell[]\n\n获取所有祖先节点。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.deep| boolean| | `true`| 默认递归获取所有祖先节点，设置为 `false` 时只返回当前节点/边的父节点。  \n  \n返回值\n\n返回祖先节点数组。\n\n#### getDescendants(...)\n    \n    \n    getDescendants(options?: Cell.GetDescendantsOptions): Cell[]\n\n获取所有子孙节点。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.deep| boolean| | `true`| 默认递归获取所有子孙节点，设置为 `false` 时只返回当前节点孩子节点/边。  \noptions.breadthFirst| boolean| | `false`| 默认使用深度优先算法，设置为 `true` 时使用广度优先搜索算法。  \n  \n返回值\n\n返回子孙节点/边的数组。\n\n#### isDescendantOf(...)\n    \n    \n    isDescendantOf(ancestor: Cell | null, options?: { deep?: boolean }): boolean\n\n返回当前节点/边是否是指定节点的子孙节点/边。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nancestor| Cell | null| ✓| | 指定节点。  \noptions.deep| boolean| | `true`| 默认递归判断指定节点的所有子孙节点/边，设置为 `false` 时只判断孩子节点/边。  \n  \n#### isAncestorOf(...)\n    \n    \n    isAncestorOf(descendant: Cell | null, options?: { deep?: boolean }): boolean\n\n返回当前节点是否是指定节点/边的祖先节点。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \ndescendant| Cell | null| ✓| | 指定节点/边。  \noptions.deep| boolean| | `true`| 默认递归判断指定节点的所有子孙节点/边，设置为 `false` 时只判断孩子节点/边。  \n  \n#### getCommonAncestor(...)\n    \n    \n    getCommonAncestor(...cells: (Cell | null | undefined)[]): Cell | null\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \n...cells| (Cell | null | undefined)[]| ✓| | 指定节点/边。  \n  \n获取给定节点/边的共同祖先节点。\n\n返回值\n\n返回找到的共同祖先节点，否则没有共同祖先节点时返回 `null`。\n\n#### addTo(...)\n    \n    \n    addTo(model: Model, options?: Cell.SetOptions): this\n    addTo(graph: Graph, options?: Cell.SetOptions): this\n    addTo(parent: Cell, options?: Cell.SetOptions): this\n\n将当前节点/边添加到画布或指定的父节点。\n\n#### insertTo(...)\n    \n    \n    insertTo(parent: Cell, index?: number, options?: Cell.SetOptions): this\n\n将当前节点/边插入到指定父节点的指定位置。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nparent| Cell| ✓| | 父节点。  \nindex| number| | | 要插入的索引位置，缺省时插入到末尾。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:parent'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### addChild(...)\n    \n    \n    addChild(child: Cell, options?: Cell.SetOptions): this\n\n将指定的节点/边添加到当前节点的子节点的末尾。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchild| Cell| ✓| | 指定的节点/边。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### insertChild(...)\n    \n    \n    insertChild(child: Cell, index?: number, options?: Cell.SetOptions): this\n\n将指定的节点/边添加到当前节点的子节点的指定位置。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchild| Cell| ✓| | 指定的节点/边。  \nindex| number| | | 要插入的索引位置，缺省时插入到末尾。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### embed(...)\n    \n    \n    embed(child: Cell, options?: Cell.SetOptions): this\n\n将指定的节点/边嵌入到当前节点，即将指定的节点/边插入到当前节点的末尾。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchild| Cell| ✓| | 指定的节点/边。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### unembed(...)\n    \n    \n    unembed(child: Cell, options?: Cell.SetOptions): this\n\n将指定的节点/边从当前节点中移除。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchild| Cell| ✓| | 指定的节点/边。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeFromParent(...)\n    \n    \n    removeFromParent(options?: Cell.RemoveOptions): this\n\n将当前节点从父节点中移除。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.deep| boolean| | `true`| 默认递归移除所有子节点/边，设置为 `false` 时只移除当前节点/边。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeChild(...)\n    \n    \n    removeChild(child: Cell, options?: Cell.RemoveOptions): Cell | null\n\n移除指定的子节点/边。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nchild| Cell| ✓| | 指定的节点/边。  \noptions.deep| boolean| | `true`| 默认递归移除所有子节点/边，设置为 `false` 时只移除当前节点/边。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n返回值\n\n返回被移除的节点/边。\n\n#### removeChildAt(...)\n    \n    \n    removeChildAt(index: number, options?: Cell.RemoveOptions): Cell | null\n\n移除指定索引位置的子节点/边。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 指定的索引位置。  \noptions.deep| boolean| | `true`| 默认递归移除所有子节点/边，设置为 `false` 时只移除当前节点/边。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:children'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n返回值\n\n返回被移除的节点/边。\n\n#### remove(...)\n    \n    \n    remove(options?: Cell.RemoveOptions): this\n\n先将当前节点/边从父节点，然后将其从画布中移除。\n\n### 节点和边的属性 Properties\n\n上面介绍的 `markup`、`attrs`、`zIndex`、`data` 等基础选项，以及节点的 `size`、 `position`、`angle`、`ports` 等选项，还有边的 `source`、`target`、`labels` 等选项，还有创建节点/边时提供的那些额外的键值对，我们都称为属性(Property)。\n    \n    \n    const rect = new Shape.Rect({\n      x: 30,\n      y: 30,\n      width: 100,\n      height: 40,\n      attrs: {...},\n      data: {...},\n      zIndex: 10,\n      sale: {...},\n      product: {\n        id: '1234',\n        name: 'apple',\n        price: 3.99,\n      },\n    })\n\n例如，上面代码中的 `attrs`、`data`、`zIndex` 都是标准的属性，其中 `x` 和 `y` 是一对，节点初始化时被转换为了 `position` 属性，同样 `width` 和 `height` 也是一对，节点初始化时被转换为了 `size` 属性，最后剩余的 `sale` 和 `product` 两个对象是非标准的属性。 \n\n上面介绍了一些标准属性以及操作（`get`/`set`）这些标准属性的方法，下面再介绍几个比较通用的方法，这些方法对标准和非标准属性都适用。\n\n#### getProp(...)\n    \n    \n    getProp<T>(key: string, defaultValue?: T): T\n\n获取指定的属性值。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nkey| string| ✓| | 属性名称。  \ndefaultValue| T| | `undefined`| 默认值，当指定的属性不存在时返回该默认值。  \n  \n用法\n    \n    \n    // 获取标准属性\n    const zIndex = rect.getProp<number>('zIndex')\n    const position = rect.getProp<{x: number; y: number}>('position')\n    \n    // 获取非标准属性\n    const product = rect.getProp('product')\n\n#### setProp(...)\n    \n    \n    /**\n     * 设置指定的属性\n     */\n    setProp(key: string, value: any, options?: Cell.SetOptions): this\n    /**\n     * 批量设置属性，提供的属性与原属性进行深度 merge\n     */\n    setProp(props: Partial<Properties>, options?: Cell.SetOptions): this\n\n设置属性。\n\n默认情况触发对应的 `'change:xxx'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:xxx'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nkey| string| ✓| | 属性名称。  \nvalue| any| ✓| | 属性值。  \nprops| Partial| ✓| | 属性键值对，将与现有属性进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:markup'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n设置单个属性：\n    \n    \n    rect.setProp('size', { width: 100, height: 30 })\n    rect.setProp('zIndex', 10)\n\n通过键值对设置多个属性，提供的键值对将与现有属性进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)：\n    \n    \n    rect.setProp({\n      size: {\n        width: 100, \n        height: 30, \n      },\n      zIndex: 10,\n    })\n\n当 `options.silent` 为 `true` 时，不触发对应的 `'change:xxx'` 事件和画布重绘：\n    \n    \n    rect.setProp('zIndex', 10, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    rect.setProp('zIndex', 10, { otherKey: 'otherValue', ... })\n\n#### removeProp(...)\n    \n    \n    removeProp(path: string | string[], options?: Cell.SetOptions): this\n\n删除指定路径的属性。\n\n默认情况触发对应的 `'change:xxx'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:xxx'` 事件和画布重绘。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 属性路径。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:markup'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n删除单个属性：\n    \n    \n    rect.removeProp('zIndex')\n\n删除指定路径的属性：\n    \n    \n    rect.removeProp('product/id')\n    // 或\n    rect.removeProp(['product', 'id'])\n\n当 `options.silent` 为 `true` 时，不触发对应的 `'change:xxx'` 事件和画布重绘：\n    \n    \n    rect.removeProp('zIndex', { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    rect.removeProp('zIndex', { otherKey: 'otherValue', ... })\n\n#### getPropByPath(...)\n    \n    \n    getPropByPath<T>(path: string | string[]): T\n\n获取指定路径的属性值。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 属性路径。   \n当 `path` 为 `string` 类型时，路径是以 `'\\'` 分割的字符串。   \n当 `path` 为 `string[]` 类型时，路径是属性对象路径上的 Key 构成的数组。  \n  \n用法\n    \n    \n    rect.getPropByPath('zIndex')\n    // 或\n    rect.getPropByPath(['zIndex'])\n    \n    rect.getPropByPath('product/id')\n    // 或\n    rect.getPropByPath(['product', 'id'])\n\n#### setPropByPath(...)\n    \n    \n    setPropByPath(path: string | string[], value: any, options?: Cell.SetByPathOptions): this\n\n根据属性路径设置属性值。\n\n默认情况触发对应的 `'change:xxx'` 事件和画布重绘，当 `options.silent` 为 `true` 时不触发 `'change:xxx'` 事件和画布重绘。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 属性路径。   \n当 `path` 为 `string` 类型时，路径是以 `'\\'` 分割的字符串。   \n当 `path` 为 `string[]` 类型时，路径是属性对象路径上的 Key 构成的数组。  \nvalue| any| ✓| | 属性值。  \noptions.rewrite| boolean| | `false`| 默认与现路径上的现有属性进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)，设置为 `true` 时直接替换路径上的属性值。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况触发对应的 `'change:xxx'` 事件和画布重绘：\n    \n    \n    rect.setPropByPath('zIndex', 10)\n    // 或\n    rect.setPropByPath(['zIndex'], 10)\n    \n    rect.setPropByPath('product/price', 5.99)\n    // 或\n    rect.setPropByPath(['product', 'price'], 5.99)\n\n当 `options.silent` 为 `true` 时不触发 `'change:xxx'` 事件和画布重绘：\n    \n    \n    rect.setPropByPath('zIndex', 10, { silent: true })\n    // 或\n    rect.setPropByPath(['zIndex'], 10, { silent: true })\n    \n    rect.setPropByPath('product/price', 5.99, { silent: true })\n    // 或\n    rect.setPropByPath(['product', 'price'], 5.99, { silent: true })\n\n默认与现路径上的现有属性进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)，当 `options.rewrite` 设置为 `true` 时直接替换路径上的属性值：\n    \n    \n    rect.setPropByPath(\n      ['product'], \n      { id: '234', name: 'banana', price: 2.99 }, \n      { rewrite: true },\n    )\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    rect.setPropByPath('zIndex', 10, { otherKey: 'otherValue', ... })\n\n#### removePropByPath(...)\n    \n    \n    removePropByPath(path: string | string[], options?: Cell.SetOptions): this\n\n删除指定路径的属性值。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 属性路径。   \n当 `path` 为 `string` 类型时，路径是以 `'\\'` 分割的字符串。   \n当 `path` 为 `string[]` 类型时，路径是属性对象路径上的 Key 构成的数组。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:attrs'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n用法\n\n默认情况触发对应的 `'change:xxx'` 事件和画布重绘：\n    \n    \n    rect.removePropByPath('zIndex')\n    // 或\n    rect.removePropByPath(['zIndex'])\n    \n    rect.removePropByPath('product/price')\n    // 或\n    rect.removePropByPath(['product', 'price'])\n\n当 `options.silent` 为 `true` 时不触发 `'change:xxx'` 事件和画布重绘：\n    \n    \n    rect.removePropByPath('zIndex', { silent: true })\n    // 或\n    rect.removePropByPath(['zIndex'], { silent: true })\n    \n    rect.removePropByPath('product/price', { silent: true })\n    // 或\n    rect.removePropByPath(['product', 'price'], { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    rect.removePropByPath('zIndex', { otherKey: 'otherValue', ... })\n\n#### prop(...)\n    \n    \n    /**\n     * 获取所有属性。\n     */\n    prop(): Properties\n    \n    /**\n     * 获取指定路径的属性值。\n     */\n    prop<T>(path: string | string[]): T\n    \n    /**\n     * 设置指定路径的属性值，与路径上的现有属性进行深度 merge。\n     */\n    prop(path: string | string[], value: any, options?: Cell.SetOptions): this\n    \n    \n    /**\n     * 设置属性，与现有属性进行深度 merge。\n     */\n    prop(props: Partial<Properties>, options?: Cell.SetOptions): this\n\n该方法是 [getProp](https://x6.antv.vision/zh/docs/api/model/cell/#getprop)、[setProp](https://x6.antv.vision/zh/docs/api/model/cell/#setprop)、[getPropByPath](https://x6.antv.vision/zh/docs/api/model/cell/#getpropbypath)、[setPropByPath](https://x6.antv.vision/zh/docs/api/model/cell/#setpropbypath) 和 [removePropByPath](https://x6.antv.vision/zh/docs/api/model/cell/#removepropbypath) 几个方法的整合，提供了上面四种函数签名，是一个非常实用的方法。\n\n用法\n\n获取属性：\n    \n    \n    rect.prop()\n    rect.prop('zIndex')\n    rect.prop('product/price')\n\n设置属性：\n    \n    \n    rect.prop('zIndex', 10)\n    rect.prop('product/price', 5.99)\n    rect.prop({\n      product: {\n        id: '234',\n        name: 'banana',\n        price: 3.99,\n      },\n    })\n\n当 `options.silent` 为 `true` 时不触发 `'change:xxx'` 事件和画布重绘：\n    \n    \n    rect.prop('zIndex', 10, { silent: true })\n    // 或\n    rect.prop(['zIndex'], 10, { silent: true })\n    \n    rect.prop('product/price', 5.99, { silent: true })\n    // 或\n    rect.prop(['product', 'price'], 5.99, { silent: true })\n\n在选项中支持其他自定义键值对，可以在事件回调用使用：\n    \n    \n    rect.prop('zIndex', 10, { otherKey: 'otherValue', ... })\n\n#### hasChanged(...)\n    \n    \n    hasChanged(key: string | undefined | null): boolean\n\n返回指定的属性或所有属性是否已经改变。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nkey| string | undefined | null| | | 属性名。缺省时表示检查所有属性。  \n  \n用法\n    \n    \n    if (rect.hasChanged()) {\n      // do something\n    }\n    \n    if (rect.hasChanged('zIndex')) {\n      // do something\n    }\n\n#### previous(...)\n    \n    \n    previous<T>(name: string): T | undefined\n\n当指定的属性发生改变后，获取改变前的属性值。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nkey| string| ✓| | 属性名。  \n  \n用法\n    \n    \n    if (rect.hasChanged('zIndex')) {\n      const old = rect.previous('zIndex')\n      // do something\n    }\n\n### 工具集 Tools\n\n#### addTools(...)\n    \n    \n    addTools(\n      items: Cell.ToolItem | Cell.ToolItem[],\n      options?: Cell.AddToolOptions,\n    ): this\n    addTools(\n      items: Cell.ToolItem | Cell.ToolItem[],\n      name: string,\n      options?: Cell.AddToolOptions,\n    ): this\n\n添加小工具。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nitems| Cell.ToolItem | Cell.ToolItem[]| | | [NodeTool](https://x6.antv.vision/zh/docs/api/registry/node-tool#presets) 或 [EdgeTool](https://x6.antv.vision/zh/docs/api/registry/edge-tool#presets) 中定义的小工具。  \nname| string| | `null`| 定义该组工具的别称，可以作为`hasTools(name)`的参数  \noptions.reset| boolean| | `false`| 是否清空工具集，默认向工具集追加小工具。  \noptions.local| boolean| | `false`| 工具是否渲染到节点/边的容器中，默认为 `false`，所有工具会渲染在 `x6-graph-svg-decorator` 下面，只有在 `options.reset` 为 `true` 为时生效  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:tools'` 事件和小工具重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### getTools()\n    \n    \n    getTools(): Cell.Tools | null\n\n获取工具集。\n\n#### removeTools(...)\n    \n    \n    removeTools(options?: Cell.SetOptions): this\n\n删除所有工具。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:tools'` 事件和小工具重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### hasTool(name: string): boolean\n    \n    \n    hasTool(name: string): boolean\n\n是否包含指定名称的工具。\n\n#### removeTool(...)\n    \n    \n    removeTool(name: string, options?: Cell.SetOptions): this\n    removeTool(index: number, options?: Cell.SetOptions): this\n\n删除指定名称的工具。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nnameOrIndex| string | number| ✓| | 工具名称或索引。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:tools'` 事件和小工具重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n### 动画 Transition\n\n#### transition(...)\n    \n    \n    transition(\n      path: string | string[],\n      target: Animation.TargetValue,\n      options: Animation.StartOptions = {},\n      delim: string = '/',\n    ): () => void\n\n将指定路径 `path` 上对应的属性值通过平滑动画的形式过渡到 `target` 指定的目标值，并返回 `stop` 方法，调用该方法时立即停止该动画。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 路径。  \ntarget| any| ✓| | 目标属性值。  \noptions.delay| number| | `10`| 动画延迟多久后开始，单位毫秒。  \noptions.duration| number| | `100`| 动画时长，单位毫秒。  \noptions.timing| Timing.Names | (t: number) => number| | | 定时函数。  \noptions.interp| <T>(from: T, to: T) => (time: number) => T| | | 插值函数。  \noptions.start| (args: Animation.CallbackArgs) => void| | | 动画开始执行时的回调函数。  \noptions.progress| (args: Animation.ProgressArgs) => void| | | 动画执行过程中的回调函数。  \noptions.complete| (args: Animation.CallbackArgs) => void| | | 动画执行完成时的回调函数。  \noptions.stop| (args: Animation.CallbackArgs) => void| | | 动画被停止时的回调函数。  \noptions.finish| (args: Animation.CallbackArgs) => void| | | 动画执行完成或被停止时的回调函数。  \noptions.jumpedToEnd| boolean| | `false`| 手动停止动画时，是否立即将动画完成。  \ndelim| string| | `'/'`| 字符串路径分隔符。  \n  \n我们在 `Timing` 命名空间中提供了一些定时函数。可以使用内置的定时函数名，或提供一个具有 `(t: number) => number` 签名的函数。内置的定时函数如下：\n\n  * linear\n  * quad\n  * cubic\n  * inout\n  * exponential\n  * bounce\n  * easeInSine\n  * easeOutSine\n  * easeInOutSine\n  * easeInQuad\n  * easeOutQuad\n  * easeInOutQuad\n  * easeInCubic\n  * easeOutCubic\n  * easeInOutCubic\n  * easeInQuart\n  * easeOutQuart\n  * easeInOutQuart\n  * easeInQuint\n  * easeOutQuint\n  * easeInOutQuint\n  * easeInExpo\n  * easeOutExpo\n  * easeInOutExpo\n  * easeInCirc\n  * easeOutCirc\n  * easeInOutCirc\n  * easeInBack\n  * easeOutBack\n  * easeInOutBack\n  * easeInElastic\n  * easeOutElastic\n  * easeInOutElastic\n  * easeInBounce\n  * easeOutBounce\n  * easeInOutBounce\n\n\n\n我们在 `Interp` 命名空间上内置了一些插值函数，通常我们可以通过路径上的属性值来自动确定使用哪种插值函数。内置的插值函数如下：\n\n  * number - 数字插值函数。\n  * object - `{ [key: string]: number }` 对象插值函数。\n  * unit - 数字+单位字符串插值函数，如 `10px`。支持的单位有：`px, em, cm, mm, in, pt, pc, %`。\n  * color - 16 进制颜色插值函数。\n\n\n\n用法\n    \n    \n    import { Timing, Interp } from '@antv/x6'\n    \n    rect.transition('attrs/label/font-size', '1em', { \n      interp: Interp.unit,\n      timing: 'bounce', // Timing.bounce\n    });\n\n#### stopTransition(...)\n    \n    \n    stopTransition(\n      path: string | string[],\n      options?: Animation.StopOptions<T>,\n      delim: string = '/',\n    ): this\n\n停止与指定路径 `path` 对应的动画。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \npath| string | string[]| ✓| | 路径。  \noptions.jumpedToEnd| boolean| | `false`| 手动停止动画时，是否立即将动画完成。  \noptions.complete| (args: Animation.CallbackArgs) => void| | | 动画执行完成时的回调函数。  \noptions.stop| (args: Animation.CallbackArgs) => void| | | 动画被停止时的回调函数。  \noptions.finish| (args: Animation.CallbackArgs) => void| | | 动画执行完成或被停止时的回调函数。  \ndelim| string| | `'/'`| 字符串路径分隔符。  \n  \n用法\n    \n    \n    rect.stopTransition('attrs/label/font-size')\n\n#### getTransitions()\n    \n    \n    getTransitions(): string[]\n\n获取所有活跃的动画，返回活跃动画的路径。\n\n用法\n    \n    \n    // 停止所有动画\n    rect.getTransitions().forEach(\n      (path) => rect.stopTransition(path),\n    )\n\n## config(...)\n    \n    \n    config<C extends Cell.Config = Cell.Config>(presets: C): void\n\n设置节点/边的选项默认值。\n\n参数\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.propHooks| Cell.PropHooks<M, C>| | | 自定义选项。  \noptions.attrHooks| Attr.Definitions| | | 自定义属性键值对。  \nKey 是自定义属性的属性名，Value 是自定义属性对象（包含属性检查、应用属性等方法）。  \noptions...others| object| | | 其他选项，节点/边的属性（Properties）。  \n  \n用法\n\n### 选项默认值\n\n该方法对自定义节点/边非常友好，方便我们为我们的节点/边设置一些预设选项。例如，我们在定义矩形节点时，为其指定了默认 Markup、默认大小和默认样式。\n    \n    \n    Shape.Rect.config({\n      width: 80,\n      height: 40,\n      markup: ...,\n      attrs: ...,\n    })\n\n我们创建矩形的代码就可以非常简单：\n    \n    \n    const rect = graph.addNode({\n      x: 100,\n      y: 100,\n      attrs: {\n        label: {\n          text: 'rect',\n        },\n      },\n    })\n\n每次调用 `config(presets)` 都是与当前预设值进行[深度 merge](https://www.lodashjs.com/docs/latest#_mergeobject-sources)，例如下面代码分别将矩形的边框默认颜色修改为红色和将默认文本颜色修改为蓝色，最终效果是两者的叠加：\n    \n    \n    // 只修改边框的默认颜色\n    Shape.Rect.config({\n      attrs: {\n        body: {\n          stroke: 'red',\n        },\n      },\n    })\n    \n    // 只修改默认文本颜色\n    Shape.Rect.config({\n      attrs: {\n        label: {\n          fill: 'blue',\n          // 覆盖上面定义的 red\n          stroke: '#000',\n        },\n      },\n    })\n\n### 自定义选项\n\n创建矩形时我们可以使用 `label` 来设置矩形的标签文本：\n    \n    \n    const rect = graph.addNode({\n      x: 100,\n      y: 100,\n      label: 'rect',\n    })\n\n而我们并没有为矩形定义 `label` 这个选项，那这个 `label` 是怎么应用到 `attrs/label/text` 上的呢？这就用到了 `propHooks` 钩子，我们可以定义 `propHooks` 钩子来消费这些非标准的选项。\n\n看下面 `label` 选项钩子的实现细节：\n    \n    \n    Shape.Rect.config({\n      // 通过钩子将 label 应用到 'attrs/text/text' 属性上\n      propHooks(metadata) {\n        const { label, ...others } = metadata\n        if (label) {\n          ObjectExt.setByPath(others, 'attrs/text/text', label)\n        }\n        return others\n      },\n    })\n\n通过 `propHooks` 钩子，我们很容易就扩展出一些自定义的选项。例如，我们可以将某些样式定义为节点的选项，这样不仅可以减少嵌套，而且使创建节点的代码语义性更强。\n\n看下面的代码，为矩形定义 `rx` 和 `ry` 自定义选项：\n    \n    \n    Shape.Rect.config({\n      propHooks: {\n        rx(metadata) { \n          const { rx, ...others } = metadata\n          if (rx != null) {\n            ObjectExt.setByPath(others, 'attrs/body/rx', rx)\n          }\n          return others\n        },\n        ry(metadata) { \n          const { ry, ...others } = metadata\n          if (ry != null) {\n            ObjectExt.setByPath(others, 'attrs/body/ry', ry)\n          }\n          return others\n        },\n      },\n    })\n\n这样，我们就可以很方便添加圆角矩形：\n    \n    \n    const rect = graph.addNode({\n      x: 100,\n      y: 100,\n      rx: 5,\n      ry: 10,\n      label: 'rect',\n    })\n\n### 自定义属性\n\n自定义属性是指那些非标准的 SVG/HTML 属性，如系统内置的 `refWidth`、`refHeight`、`sourceMarker`、`targetMarker` 等属性。这些属性都是全局共享的，我们可以通过 `attrHooks` 钩子来为节点/边定义**独享** 的自定义属性。 \n\n例如：\n    \n    \n    import { Shape, Color } from '@antv/x6'\n    \n    Shape.Rect.config({\n      attrHooks: {\n        fill: {\n          set(val) {\n            return Color.invert(val) // 自动反转填充色\n          },\n        },\n        theme: {\n          set(val) {\n            // 同时设置填充色和边框色\n            return {\n              fill: val,\n              stroke: Color.invert(val),\n            }\n          },\n        },\n      }\n    })\n\n我们可以这样来使用上面定义的 `fill` 和 `theme` 属性：\n    \n    \n    const rect = graph.addNode({\n      x: 100,\n      y: 100,\n      rx: 5,\n      ry: 10,\n      label: 'rect',\n      attrs: {\n        body: {\n          theme: '#f5f5f5',\n        },\n        label: {\n          fill: '#fff',\n        },\n      },\n    })\n\n  * [Graph](https://x6.antv.vision/zh/docs/api/graph/graph)\n  * [Grid](https://x6.antv.vision/zh/docs/api/graph/grid)\n  * [Background](https://x6.antv.vision/zh/docs/api/graph/background)\n  * [Snapline](https://x6.antv.vision/zh/docs/api/graph/snapline)\n  * [Scroller](https://x6.antv.vision/zh/docs/api/graph/scroller)\n  * [MiniMap](https://x6.antv.vision/zh/docs/api/graph/minimap)\n  * [History](https://x6.antv.vision/zh/docs/api/graph/history)\n  * [Clipboard](https://x6.antv.vision/zh/docs/api/graph/clipboard)\n  * [Keyboard](https://x6.antv.vision/zh/docs/api/graph/keyboard)\n  * [MouseWheel](https://x6.antv.vision/zh/docs/api/graph/mousewheel)\n  * [Selection](https://x6.antv.vision/zh/docs/api/graph/selecting)\n  * [Interaction](https://x6.antv.vision/zh/docs/api/graph/interaction)\n  * [Transform](https://x6.antv.vision/zh/docs/api/graph/transform)\n  * [View](https://x6.antv.vision/zh/docs/api/graph/view)\n  * [Model](https://x6.antv.vision/zh/docs/api/graph/model)\n  * [Coordinate](https://x6.antv.vision/zh/docs/api/graph/coordinate)\n  * [Other](https://x6.antv.vision/zh/docs/api/graph/other)\n\n\n\n  * [Cell](https://x6.antv.vision/zh/docs/api/model/cell)\n  * [Node](https://x6.antv.vision/zh/docs/api/model/node)\n  * [Edge](https://x6.antv.vision/zh/docs/api/model/edge)\n\n\n\n  * [View](https://x6.antv.vision/zh/docs/api/view/view)\n  * [CellView](https://x6.antv.vision/zh/docs/api/view/cellview)\n  * [NodeView](https://x6.antv.vision/zh/docs/api/view/nodeview)\n  * [EdgeView](https://x6.antv.vision/zh/docs/api/view/edgeview)\n\n\n\n  * [Attr](https://x6.antv.vision/zh/docs/api/registry/attr)\n  * [PortLayout](https://x6.antv.vision/zh/docs/api/registry/port-layout)\n  * [PortLabelLayout](https://x6.antv.vision/zh/docs/api/registry/port-label-layout)\n  * [NodeAnchor](https://x6.antv.vision/zh/docs/api/registry/node-anchor)\n  * [EdgeAnchor](https://x6.antv.vision/zh/docs/api/registry/edge-anchor)\n  * [ConnectionPoint](https://x6.antv.vision/zh/docs/api/registry/connection-point)\n  * [Router](https://x6.antv.vision/zh/docs/api/registry/router)\n  * [Connector](https://x6.antv.vision/zh/docs/api/registry/connector)\n  * [Marker](https://x6.antv.vision/zh/docs/api/registry/marker)\n  * [Highlighter](https://x6.antv.vision/zh/docs/api/registry/highlighter)\n  * [NodeTool](https://x6.antv.vision/zh/docs/api/registry/node-tool)\n  * [EdgeTool](https://x6.antv.vision/zh/docs/api/registry/edge-tool)\n  * [Background](https://x6.antv.vision/zh/docs/api/registry/background)\n  * [Grid](https://x6.antv.vision/zh/docs/api/registry/grid)\n  * [Filter](https://x6.antv.vision/zh/docs/api/registry/filter)\n\n\n\n  * [Menu](https://x6.antv.vision/zh/docs/api/ui/menu)\n  * [Dropdown](https://x6.antv.vision/zh/docs/api/ui/dropdown)\n  * [ContextMenu](https://x6.antv.vision/zh/docs/api/ui/contextmenu)\n  * [Menubar](https://x6.antv.vision/zh/docs/api/ui/menubar)\n  * [Toolbar](https://x6.antv.vision/zh/docs/api/ui/toolbar)\n  * [SplitBox](https://x6.antv.vision/zh/docs/api/ui/splitbox)\n  * [ScrollBox](https://x6.antv.vision/zh/docs/api/ui/scrollbox)\n  * [AutoScrollBox](https://x6.antv.vision/zh/docs/api/ui/auto-scrollbox)\n  * [ColorPicker](https://x6.antv.vision/zh/docs/api/ui/color-picker)\n\n\n\n  * Graph __\n\n    * [Graph](https://x6.antv.vision/zh/docs/api/graph/graph)\n    * [Grid](https://x6.antv.vision/zh/docs/api/graph/grid)\n    * [Background](https://x6.antv.vision/zh/docs/api/graph/background)\n    * [Snapline](https://x6.antv.vision/zh/docs/api/graph/snapline)\n    * [Scroller](https://x6.antv.vision/zh/docs/api/graph/scroller)\n    * [MiniMap](https://x6.antv.vision/zh/docs/api/graph/minimap)\n    * [History](https://x6.antv.vision/zh/docs/api/graph/history)\n    * [Clipboard](https://x6.antv.vision/zh/docs/api/graph/clipboard)\n    * [Keyboard](https://x6.antv.vision/zh/docs/api/graph/keyboard)\n    * [MouseWheel](https://x6.antv.vision/zh/docs/api/graph/mousewheel)\n    * [Selection](https://x6.antv.vision/zh/docs/api/graph/selecting)\n    * [Interaction](https://x6.antv.vision/zh/docs/api/graph/interaction)\n    * [Transform](https://x6.antv.vision/zh/docs/api/graph/transform)\n    * [View](https://x6.antv.vision/zh/docs/api/graph/view)\n    * [Model](https://x6.antv.vision/zh/docs/api/graph/model)\n    * [Coordinate](https://x6.antv.vision/zh/docs/api/graph/coordinate)\n    * [Other](https://x6.antv.vision/zh/docs/api/graph/other)\n  * Model __\n\n    * [Cell](https://x6.antv.vision/zh/docs/api/model/cell)\n    * [Node](https://x6.antv.vision/zh/docs/api/model/node)\n    * [Edge](https://x6.antv.vision/zh/docs/api/model/edge)\n  * View __\n\n    * [View](https://x6.antv.vision/zh/docs/api/view/view)\n    * [CellView](https://x6.antv.vision/zh/docs/api/view/cellview)\n    * [NodeView](https://x6.antv.vision/zh/docs/api/view/nodeview)\n    * [EdgeView](https://x6.antv.vision/zh/docs/api/view/edgeview)\n  * Registry __\n\n    * [Attr](https://x6.antv.vision/zh/docs/api/registry/attr)\n    * [PortLayout](https://x6.antv.vision/zh/docs/api/registry/port-layout)\n    * [PortLabelLayout](https://x6.antv.vision/zh/docs/api/registry/port-label-layout)\n    * [NodeAnchor](https://x6.antv.vision/zh/docs/api/registry/node-anchor)\n    * [EdgeAnchor](https://x6.antv.vision/zh/docs/api/registry/edge-anchor)\n    * [ConnectionPoint](https://x6.antv.vision/zh/docs/api/registry/connection-point)\n    * [Router](https://x6.antv.vision/zh/docs/api/registry/router)\n    * [Connector](https://x6.antv.vision/zh/docs/api/registry/connector)\n    * [Marker](https://x6.antv.vision/zh/docs/api/registry/marker)\n    * [Highlighter](https://x6.antv.vision/zh/docs/api/registry/highlighter)\n    * [NodeTool](https://x6.antv.vision/zh/docs/api/registry/node-tool)\n    * [EdgeTool](https://x6.antv.vision/zh/docs/api/registry/edge-tool)\n    * [Background](https://x6.antv.vision/zh/docs/api/registry/background)\n    * [Grid](https://x6.antv.vision/zh/docs/api/registry/grid)\n    * [Filter](https://x6.antv.vision/zh/docs/api/registry/filter)\n  * UI Components __\n\n    * [Menu](https://x6.antv.vision/zh/docs/api/ui/menu)\n    * [Dropdown](https://x6.antv.vision/zh/docs/api/ui/dropdown)\n    * [ContextMenu](https://x6.antv.vision/zh/docs/api/ui/contextmenu)\n    * [Menubar](https://x6.antv.vision/zh/docs/api/ui/menubar)\n    * [Toolbar](https://x6.antv.vision/zh/docs/api/ui/toolbar)\n    * [SplitBox](https://x6.antv.vision/zh/docs/api/ui/splitbox)\n    * [ScrollBox](https://x6.antv.vision/zh/docs/api/ui/scrollbox)\n    * [AutoScrollBox](https://x6.antv.vision/zh/docs/api/ui/auto-scrollbox)\n    * [ColorPicker](https://x6.antv.vision/zh/docs/api/ui/color-picker)\n\n\n"
}
