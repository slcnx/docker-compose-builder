{
  "url": "https://x6.antv.vision/zh/docs/api/registry/edge-tool#edge-editor",
  "metadata": {
    "title": "EdgeTool | X6",
    "description": "JavaScript diagramming library",
    "keywords": [],
    "author": "",
    "publish_date": "",
    "domain": "x6.antv.vision"
  },
  "content": "[presets](https://x6.antv.vision/zh/docs/api/registry/edge-tool#presets \"presets\")\n\n[vertices](https://x6.antv.vision/zh/docs/api/registry/edge-tool#vertices \"vertices\")\n\n[segments](https://x6.antv.vision/zh/docs/api/registry/edge-tool#segments \"segments\")\n\n[boundary](https://x6.antv.vision/zh/docs/api/registry/edge-tool#boundary \"boundary\")\n\n[button](https://x6.antv.vision/zh/docs/api/registry/edge-tool#button \"button\")\n\n[button-remove](https://x6.antv.vision/zh/docs/api/registry/edge-tool#button-remove \"button-remove\")\n\n[source-arrowhead 和 target-arrowhead](https://x6.antv.vision/zh/docs/api/registry/edge-tool#source-arrowhead-和-target-arrowhead \"source-arrowhead 和 target-arrowhead\")\n\n[edge-editor](https://x6.antv.vision/zh/docs/api/registry/edge-tool#edge-editor \"edge-editor\")\n\n[registry](https://x6.antv.vision/zh/docs/api/registry/edge-tool#registry \"registry\")\n\n[register](https://x6.antv.vision/zh/docs/api/registry/edge-tool#register \"register\")\n\n[unregister](https://x6.antv.vision/zh/docs/api/registry/edge-tool#unregister \"unregister\")\n\n[自定义工具](https://x6.antv.vision/zh/docs/api/registry/edge-tool#自定义工具 \"自定义工具\")\n\n# EdgeTool\n\n阅读时间约 7 分钟\n\n由于边通常是一个具有较小宽度的折线/曲线，就不太方便与边进行交互。为了解决这个问题，我们一方面在渲染边的同时还渲染了一个与边同形状的 `<path>` 路径，但宽度更宽且透明的边，来方便用户与边进行交互；另外，我们也可以为边添加一些小工具来增强边的交互能力，如路径点小工具使路径点可以被移动、线段小工具使边中的线段可以被移动等。我们在 `Registry.EdgeTool.presets` 命名空间中提供了一些边的小工具，可以在下面这些场景使用。\n\n场景一：添加指定的小工具。\n    \n    \n    // 创建边时添加小工具\n    graph.addEdge({\n      source,\n      target,\n      tools:[\n        { name: 'vertices' },\n        {\n          name: 'button-remove',\n          args: { distance: 20  },\n        },\n      ],\n    })\n    \n    \n    // 创建边后添加小工具\n    edge.addTools([\n      { name: 'vertices' },\n      {\n        name: 'button-remove',\n        args: { distance: 20  },\n      },\n    ])\n\n场景二：鼠标动态添加/删除小工具。\n    \n    \n    graph.on('edge:mouseenter', ({ cell }) => {\n      cell.addTools(\n        [\n          { name: 'vertices' },\n          {\n            name: 'button-remove',\n            args: { distance: 20  },\n          },\n        ],\n      )\n    })\n    \n    graph.on('edge:mouseleave', ({ cell }) => {\n      if (cell.hasTool('button-remove')) {\n        cell.removeTool('button-remove')\n      }\n    })\n\n在 X6 中默认提供了以下几个用于边的小工具：\n\n  * [vertices](https://x6.antv.vision/zh/docs/api/registry/edge-tool#vertices) 路径点工具，在路径点位置渲染一个小圆点，拖动小圆点修改路径点位置，双击小圆点删除路径点，在边上单击添加路径点。\n  * [segments](https://x6.antv.vision/zh/docs/api/registry/edge-tool#segments) 线段工具。在边的每条线段的中心渲染一个工具条，可以拖动工具条调整线段两端的路径点的位置。\n  * [boundary](https://x6.antv.vision/zh/docs/api/registry/edge-tool#boundary) 根据边的包围盒渲染一个包围边的矩形。注意，该工具仅仅渲染一个矩形，不带任何交互。\n  * [button](https://x6.antv.vision/zh/docs/api/registry/edge-tool#button) 在指定位置处渲染一个按钮，支持自定义按钮的点击交互。\n  * [button-remove](https://x6.antv.vision/zh/docs/api/registry/edge-tool#button-remove) 在指定的位置处，渲染一个删除按钮，点击时删除对应的边。\n  * [source-arrowhead-和-target-arrowhead](https://x6.antv.vision/zh/docs/api/registry/edge-tool#source-arrowhead-%E5%92%8C-target-arrowhead) 在边的起点或终点渲染一个图形(默认是箭头)，拖动该图形来修改边的起点或终点。\n  * [edge-editor](https://x6.antv.vision/zh/docs/api/registry/edge-tool#edge-editor) 提供边上文本编辑功能。\n\n\n\n## presets\n\n### vertices\n\n路径点工具，在路径点位置渲染一个小圆点，拖动小圆点修改路径点位置，双击小圆点删除路径点，在边上单击添加路径点。\n\n参数\n\n参数名| 类型| 默认值| 说明  \n---|---|---|---  \nattrs| KeyValue| `undefined`| 小圆点的属性。  \nsnapRadius| number| `20`| 移动路径点过程中的吸附半径。当路径点与邻近的路径点的某个坐标 `(x, y)` 距离在半径范围内时，将当前路径点的对应坐标 `(x, y)` 吸附到邻居路径的路径点。  \naddable| boolean| `true`| 在边上按下鼠标时，是否可以添加新的路径点。  \nremovable| boolean| `true`| 是否可以通过双击移除路径点。  \nremoveRedundancies| boolean| `true`| 是否自动移除冗余的路径点。  \nstopPropagation| boolean| `true`| 是否阻止工具上的鼠标事件冒泡到边视图上。阻止后鼠标与工具交互时将不会触发边的 `mousedown`、`mousemove` 和 `mouseup` 事件。  \n  \n使用\n    \n    \n    // 创建 edge 时添加小工具\n    const edge1 = graph.addEdge({\n      ...,\n      tools: {\n        items: [\n          {\n            name: 'vertices',\n            args: {\n              attrs: { fill: '#666' },\n            },\n          },\n        ],\n      },\n    })\n    \n    // 鼠标 Hover 时添加小工具\n    graph.on('edge:mouseenter', ({ cell }) => {\n      if (cell === edge2) {\n        cell.setTools({\n          name: 'onhover',\n          tools: ['vertices'],\n        })\n      }\n    })\n    \n    graph.on('edge:mouseleave', ({ cell }) => {\n      if (cell.hasTools('onhover')) {\n        cell.removeTools()\n      }\n    })\n\n### segments\n\n线段工具。在边的每条线段的中心渲染一个工具条，可以拖动工具条调整线段两端的路径点的位置。\n\n参数\n\n参数名| 类型| 默认值| 说明  \n---|---|---|---  \nattrs| object| `{width: 20, height: 8, x: -10, y: -4, rx: 4, ry: 4, fill: '#333', stroke: '#fff', stroke-width: 2}`| 元素的属性。  \nprecision| number| `0.5`| 线段的两个端点的 X 或 Y 轴的坐标差小于 `precision` 时才渲染工具，默认 `0.5` 表示只对垂直和水平线段渲染工具。  \nthreshold| number| `40`| 线段长度超过 `threshold` 时才渲染工具。  \nsnapRadius| number| `10`| 调整线段过程中的吸附半径。  \nremoveRedundancies| boolean| `true`| 是否自动移除冗余的路径点。  \nstopPropagation| boolean| `true`| 是否阻止工具上的鼠标事件冒泡到边视图上。阻止后鼠标与工具交互时将不会触发边的 `mousedown`、`mousemove` 和 `mouseup` 事件。  \n  \n使用\n    \n    \n    graph.addEdge({\n      ...,\n      tools: {\n        name: 'segments',\n        args: {\n          snapRadius: 20,\n          attrs: {\n            fill: '#444',\n          },\n        },\n      },\n    })\n\n### boundary\n\n根据边的包围盒渲染一个包围边的矩形。注意，该工具仅仅渲染一个矩形，不带任何交互。\n\n参数\n\n参数名| 类型| 默认值| 说明  \n---|---|---|---  \ntagName| string| `rect`| 使用何种图形渲染。  \npadding| number| `10`| 边距。  \nattrs| KeyValue| `object`| 图形属性。  \n  \n其中 `attrs` 的默认值(默认样式)为：\n    \n    \n    {\n      fill: 'none',\n      stroke: '#333',\n      'stroke-width': 0.5,\n      'stroke-dasharray': '5, 5',\n      'pointer-events': 'none',\n    }\n\n使用\n    \n    \n    graph.addEdge({\n      ...,\n      tools: {\n        name: 'boundary',\n        args: {\n          padding: 5,\n          attrs: {\n            fill: '#7c68fc',\n            stroke: '#333',\n            'stroke-width': 0.5,\n            'fill-opacity': 0.2,\n          },\n        },\n      },\n    })\n\n### button\n\n在指定位置处渲染一个按钮，支持自定义按钮的点击交互。\n\n参数\n\n参数名| 类型| 默认值| 说明  \n---|---|---|---  \ndistance| number| `undefined`| 偏离起点的距离或比例。  \noffset| number | Point.PointLike| `0`| 在 `distance` 基础上的偏移量。  \nrotate| boolean| `undefined`| 是否跟随边旋转。  \nmarkup| Markup.JSONMarkup| `undefined`| 渲染按钮的 Markup 定义。  \nonClick| (args: {e: JQuery.MouseDownEvent, cell: Cell, view: CellView }) => void| `undefined`| 点击按钮的回调函数。  \n  \n使用\n    \n    \n    graph.addEdge({\n      ...,\n      tools: [\n        {\n          name: 'button',\n          args: {\n            markup: [\n              {\n                tagName: 'circle',\n                selector: 'button',\n                attrs: {\n                  r: 18,\n                  stroke: '#fe854f',\n                  'stroke-width': 2,\n                  fill: 'white',\n                  cursor: 'pointer',\n                },\n              },\n              {\n                tagName: 'text',\n                textContent: 'Btn B',\n                selector: 'icon',\n                attrs: {\n                  fill: '#fe854f',\n                  'font-size': 10,\n                  'text-anchor': 'middle',\n                  'pointer-events': 'none',\n                  y: '0.3em',\n                },\n              },\n            ],\n            distance: -40,\n            onClick({ view }: any) {\n              const edge = view.cell\n              const source = edge.getSource()\n              const target = edge.getTarget()\n              edge.setSource(target)\n              edge.setTarget(source)\n            },\n          },\n        },\n        {\n          name: 'button',\n          args: {\n            markup: [\n              {\n                tagName: 'circle',\n                selector: 'button',\n                attrs: {\n                  r: 18,\n                  stroke: '#fe854f',\n                  'stroke-width': 2,\n                  fill: 'white',\n                  cursor: 'pointer',\n                },\n              },\n              {\n                tagName: 'text',\n                textContent: 'Btn A',\n                selector: 'icon',\n                attrs: {\n                  fill: '#fe854f',\n                  'font-size': 10,\n                  'text-anchor': 'middle',\n                  'pointer-events': 'none',\n                  y: '0.3em',\n                },\n              },\n            ],\n            distance: -100,\n            offset: { x: 0, y: 20 },\n            onClick({ view }: any) {\n              const edge = view.cell\n              edge.attr({\n                line: {\n                  strokeDasharray: '5, 1',\n                  strokeDashoffset:\n                    (edge.attr('line/strokeDashoffset') | 0) + 20,\n                },\n              })\n            },\n          },\n        },\n      ],\n    })\n\n### button-remove\n\n在指定的位置处，渲染一个删除按钮，点击时删除对应的边。\n\n参数\n\n参数名| 类型| 默认值| 说明  \n---|---|---|---  \ndistance| number| `60`| 偏离起点的距离或比例。  \noffset| number | Point.PointLike| `0`| 在 `distance` 基础上的偏移量。  \nrotate| boolean| `undefined`| 是否跟随边旋转。  \nmarkup| Markup.JSONMarkup| `undefined`| 渲染按钮的 Markup 定义。  \nonClick| (args: {e: JQuery.MouseDownEvent, cell: Cell, view: CellView }) => void| `undefined`| 点击按钮的回调函数。  \n  \n使用\n    \n    \n    graph.addEdge({\n      ...,\n      tools: {\n        name: 'button-remove',\n        args: { distance: -40 },\n      },\n    })\n\n### source-arrowhead 和 target-arrowhead\n\n在边的起点或终点渲染一个图形(默认是箭头)，拖动该图形来修改边的起点或终点。\n\n参数\n\n参数名| 类型| 默认值| 说明  \n---|---|---|---  \ntagName| string| `path`| 使用何种图形来渲染。  \nattrs| Attr.SimpleAttrs| `object`| 图形的属性。  \n  \n其中 `source-arrowhead` 的属性默认值为 \n    \n    \n    {\n      d: 'M 10 -8 -10 0 10 8 Z',\n      fill: '#333',\n      stroke: '#fff',\n      'stroke-width': 2,\n      cursor: 'move',\n    }\n\n`target-arrowhead` 的属性默认值为\n    \n    \n    {\n      d: 'M -10 -8 10 0 -10 8 Z',\n      fill: '#333',\n      stroke: '#fff',\n      'stroke-width': 2,\n      cursor: 'move',\n    }\n\n使用\n    \n    \n    graph.on('edge:mouseenter', ({ cell }) => {\n      cell.addTools([\n        'source-arrowhead',\n        {\n          name: 'target-arrowhead',\n          args: {\n            attrs: {\n              fill: 'red',\n            },\n          },\n        },\n      ])\n    })\n    \n    graph.on('edge:mouseleave', ({ cell }) => {\n      cell.removeTools()\n    })\n\n### edge-editor\n\n提供边上文本编辑功能。\n\n参数\n\n参数名| 类型| 默认值| 说明  \n---|---|---|---  \nevent| JQuery.MouseEventBase| -| 触发文本编辑的事件参数  \nlabelAddable| boolean| true| 点击非文本位置是否新建label  \nattrs/fontSize| string| `14`| 编辑文本字体大小  \nattrs/color| string| `#000`| 编辑文本字体颜色  \nattrs/fontFamily| string| `Arial, helvetica, sans-serif`| 编辑文本的字体  \nattrs/backgroundColor| string| `#fff`| 编辑区域的背景色  \ngetText| (this: CellView, args: {cell: Cell}) => string| -| 获取原文本方法，在自定义 `markup` 场景需要自定义 `getText` 方法  \nsetText| (this: CellView, args: {cell: Cell, value: string}) => void| -| 设置新文本，在自定义 `markup` 场景需要自定义 `setText` 方法  \n  \n使用\n    \n    \n    // 双击进入编辑模式\n    graph.on('edge:dblclick', ({ cell, e }) => {\n      cell.addTools({\n        name: 'edge-editor',\n        args: {\n          event: e,\n        },\n      })\n    })\n\n## registry\n\n我们在 Registry.EdgeTool.registry 对象上提供了注册和取消注册工具的方法，工具实际上是一个继承自 ToolItem 的[视图](https://x6.antv.vision/zh/docs/api/view/view)。\n    \n    \n    export type Definition = typeof ToolItem | (new (options: ToolItem.Options) => ToolItem)\n\n例如，上面提到的 `'button'` 工具的对应的定义为\n    \n    \n    export class Button extends ToolsView.ToolItem<EdgeView | NodeView, Button.Options> {\n      protected onRender() { ... }\n      protected onMouseDown() { ... }\n    }\n\n创建工具类之后就可以使用下面的 `register` 方法来注册到系统中。\n\n### register\n    \n    \n    register(entities: { [name: string]: Definition }, force?: boolean): void\n    register(name: string, entity: Definition, force?: boolean): Definition\n\n注册工具。\n\n### unregister\n    \n    \n    unregister(name: string): Definition | null\n\n取消注册工具。\n\n实际上，我们将 `registry` 对象的 `register` 和 `unregister` 方法分别挂载为 `Graph` 的两个静态方法 `Graph.registerEdgeTool` 和 `Graph.unregisterEdgeTool`，看下面使用示例。\n\n### 自定义工具\n\n场景一：继承 `ToolItem` 实现一个工具类，难度较高，要求对[视图基类](https://x6.antv.vision/zh/docs/api/view/view)和 `ToolItem` 类都有所了解，可以参考上述内置工具的源码，这里不展开叙述。\n    \n    \n    Graph.registerEdgeTool('button', Button)\n\n场景二：继承已经注册的工具，为继承的工具指定默认选项或者默认样式。我们在 `ToolItem` 基类上提供了一个静态方法 `define` 来快速实现继承并配置默认选项。\n    \n    \n    import { Vertices } from '@antv/x6/es/registry/tool/vertices'\n    \n    const RedVertices = Vertices.define<Vertices.Options>({\n      name: 'red-vertices', // 工具名称，可省略，指定后其大驼峰形式同时作为继承的类的类名。\n      attrs: {\n        fill: 'red',\n      },\n    })\n    \n    Graph.registerEdgeTool('red-vertices', RedVertices, true)\n\n同时，我们为 `Graph.registerEdgeTool` 方法提供了一种快速继承并指定默认选项的实现：\n    \n    \n    Graph.registerEdgeTool('red-vertices', {\n      'red-vertices',     // 工具名称，可省略，指定后其大驼峰形式同时作为继承的类的类名。\n      inherit:'vertices', // 基类名称，使用已经注册的工具名称。\n      attrs: {            // 其他选项，作为继承的类的默认选项。\n        fill: 'red',\n      },\n    })\n\n通过该方法，我们可以快速定义并注册一个圆形的端点 `circle-target-arrowhead`：\n    \n    \n    Graph.registerEdgeTool('circle-target-arrowhead', {\n      inherit: 'target-arrowhead',\n      tagName: 'circle',\n      attrs: {\n        r: 18,\n        fill: '#31d0c6',\n        'fill-opacity': 0.3,\n        stroke: '#fe854f',\n        'stroke-width': 4,\n        cursor: 'move',\n      },\n    })\n\n  * [Graph](https://x6.antv.vision/zh/docs/api/graph/graph)\n  * [Grid](https://x6.antv.vision/zh/docs/api/graph/grid)\n  * [Background](https://x6.antv.vision/zh/docs/api/graph/background)\n  * [Snapline](https://x6.antv.vision/zh/docs/api/graph/snapline)\n  * [Scroller](https://x6.antv.vision/zh/docs/api/graph/scroller)\n  * [MiniMap](https://x6.antv.vision/zh/docs/api/graph/minimap)\n  * [History](https://x6.antv.vision/zh/docs/api/graph/history)\n  * [Clipboard](https://x6.antv.vision/zh/docs/api/graph/clipboard)\n  * [Keyboard](https://x6.antv.vision/zh/docs/api/graph/keyboard)\n  * [MouseWheel](https://x6.antv.vision/zh/docs/api/graph/mousewheel)\n  * [Selection](https://x6.antv.vision/zh/docs/api/graph/selecting)\n  * [Interaction](https://x6.antv.vision/zh/docs/api/graph/interaction)\n  * [Transform](https://x6.antv.vision/zh/docs/api/graph/transform)\n  * [View](https://x6.antv.vision/zh/docs/api/graph/view)\n  * [Model](https://x6.antv.vision/zh/docs/api/graph/model)\n  * [Coordinate](https://x6.antv.vision/zh/docs/api/graph/coordinate)\n  * [Other](https://x6.antv.vision/zh/docs/api/graph/other)\n\n\n\n  * [Cell](https://x6.antv.vision/zh/docs/api/model/cell)\n  * [Node](https://x6.antv.vision/zh/docs/api/model/node)\n  * [Edge](https://x6.antv.vision/zh/docs/api/model/edge)\n\n\n\n  * [View](https://x6.antv.vision/zh/docs/api/view/view)\n  * [CellView](https://x6.antv.vision/zh/docs/api/view/cellview)\n  * [NodeView](https://x6.antv.vision/zh/docs/api/view/nodeview)\n  * [EdgeView](https://x6.antv.vision/zh/docs/api/view/edgeview)\n\n\n\n  * [Attr](https://x6.antv.vision/zh/docs/api/registry/attr)\n  * [PortLayout](https://x6.antv.vision/zh/docs/api/registry/port-layout)\n  * [PortLabelLayout](https://x6.antv.vision/zh/docs/api/registry/port-label-layout)\n  * [NodeAnchor](https://x6.antv.vision/zh/docs/api/registry/node-anchor)\n  * [EdgeAnchor](https://x6.antv.vision/zh/docs/api/registry/edge-anchor)\n  * [ConnectionPoint](https://x6.antv.vision/zh/docs/api/registry/connection-point)\n  * [Router](https://x6.antv.vision/zh/docs/api/registry/router)\n  * [Connector](https://x6.antv.vision/zh/docs/api/registry/connector)\n  * [Marker](https://x6.antv.vision/zh/docs/api/registry/marker)\n  * [Highlighter](https://x6.antv.vision/zh/docs/api/registry/highlighter)\n  * [NodeTool](https://x6.antv.vision/zh/docs/api/registry/node-tool)\n  * [EdgeTool](https://x6.antv.vision/zh/docs/api/registry/edge-tool)\n  * [Background](https://x6.antv.vision/zh/docs/api/registry/background)\n  * [Grid](https://x6.antv.vision/zh/docs/api/registry/grid)\n  * [Filter](https://x6.antv.vision/zh/docs/api/registry/filter)\n\n\n\n  * [Menu](https://x6.antv.vision/zh/docs/api/ui/menu)\n  * [Dropdown](https://x6.antv.vision/zh/docs/api/ui/dropdown)\n  * [ContextMenu](https://x6.antv.vision/zh/docs/api/ui/contextmenu)\n  * [Menubar](https://x6.antv.vision/zh/docs/api/ui/menubar)\n  * [Toolbar](https://x6.antv.vision/zh/docs/api/ui/toolbar)\n  * [SplitBox](https://x6.antv.vision/zh/docs/api/ui/splitbox)\n  * [ScrollBox](https://x6.antv.vision/zh/docs/api/ui/scrollbox)\n  * [AutoScrollBox](https://x6.antv.vision/zh/docs/api/ui/auto-scrollbox)\n  * [ColorPicker](https://x6.antv.vision/zh/docs/api/ui/color-picker)\n\n\n\n  * Graph __\n\n    * [Graph](https://x6.antv.vision/zh/docs/api/graph/graph)\n    * [Grid](https://x6.antv.vision/zh/docs/api/graph/grid)\n    * [Background](https://x6.antv.vision/zh/docs/api/graph/background)\n    * [Snapline](https://x6.antv.vision/zh/docs/api/graph/snapline)\n    * [Scroller](https://x6.antv.vision/zh/docs/api/graph/scroller)\n    * [MiniMap](https://x6.antv.vision/zh/docs/api/graph/minimap)\n    * [History](https://x6.antv.vision/zh/docs/api/graph/history)\n    * [Clipboard](https://x6.antv.vision/zh/docs/api/graph/clipboard)\n    * [Keyboard](https://x6.antv.vision/zh/docs/api/graph/keyboard)\n    * [MouseWheel](https://x6.antv.vision/zh/docs/api/graph/mousewheel)\n    * [Selection](https://x6.antv.vision/zh/docs/api/graph/selecting)\n    * [Interaction](https://x6.antv.vision/zh/docs/api/graph/interaction)\n    * [Transform](https://x6.antv.vision/zh/docs/api/graph/transform)\n    * [View](https://x6.antv.vision/zh/docs/api/graph/view)\n    * [Model](https://x6.antv.vision/zh/docs/api/graph/model)\n    * [Coordinate](https://x6.antv.vision/zh/docs/api/graph/coordinate)\n    * [Other](https://x6.antv.vision/zh/docs/api/graph/other)\n  * Model __\n\n    * [Cell](https://x6.antv.vision/zh/docs/api/model/cell)\n    * [Node](https://x6.antv.vision/zh/docs/api/model/node)\n    * [Edge](https://x6.antv.vision/zh/docs/api/model/edge)\n  * View __\n\n    * [View](https://x6.antv.vision/zh/docs/api/view/view)\n    * [CellView](https://x6.antv.vision/zh/docs/api/view/cellview)\n    * [NodeView](https://x6.antv.vision/zh/docs/api/view/nodeview)\n    * [EdgeView](https://x6.antv.vision/zh/docs/api/view/edgeview)\n  * Registry __\n\n    * [Attr](https://x6.antv.vision/zh/docs/api/registry/attr)\n    * [PortLayout](https://x6.antv.vision/zh/docs/api/registry/port-layout)\n    * [PortLabelLayout](https://x6.antv.vision/zh/docs/api/registry/port-label-layout)\n    * [NodeAnchor](https://x6.antv.vision/zh/docs/api/registry/node-anchor)\n    * [EdgeAnchor](https://x6.antv.vision/zh/docs/api/registry/edge-anchor)\n    * [ConnectionPoint](https://x6.antv.vision/zh/docs/api/registry/connection-point)\n    * [Router](https://x6.antv.vision/zh/docs/api/registry/router)\n    * [Connector](https://x6.antv.vision/zh/docs/api/registry/connector)\n    * [Marker](https://x6.antv.vision/zh/docs/api/registry/marker)\n    * [Highlighter](https://x6.antv.vision/zh/docs/api/registry/highlighter)\n    * [NodeTool](https://x6.antv.vision/zh/docs/api/registry/node-tool)\n    * [EdgeTool](https://x6.antv.vision/zh/docs/api/registry/edge-tool)\n    * [Background](https://x6.antv.vision/zh/docs/api/registry/background)\n    * [Grid](https://x6.antv.vision/zh/docs/api/registry/grid)\n    * [Filter](https://x6.antv.vision/zh/docs/api/registry/filter)\n  * UI Components __\n\n    * [Menu](https://x6.antv.vision/zh/docs/api/ui/menu)\n    * [Dropdown](https://x6.antv.vision/zh/docs/api/ui/dropdown)\n    * [ContextMenu](https://x6.antv.vision/zh/docs/api/ui/contextmenu)\n    * [Menubar](https://x6.antv.vision/zh/docs/api/ui/menubar)\n    * [Toolbar](https://x6.antv.vision/zh/docs/api/ui/toolbar)\n    * [SplitBox](https://x6.antv.vision/zh/docs/api/ui/splitbox)\n    * [ScrollBox](https://x6.antv.vision/zh/docs/api/ui/scrollbox)\n    * [AutoScrollBox](https://x6.antv.vision/zh/docs/api/ui/auto-scrollbox)\n    * [ColorPicker](https://x6.antv.vision/zh/docs/api/ui/color-picker)\n\n\n\n🇨🇳AntV 系列网站部署在 gh-pages 上，若访问速度不佳，可以前往 站点。\n\n不再提醒立即前往\n"
}
