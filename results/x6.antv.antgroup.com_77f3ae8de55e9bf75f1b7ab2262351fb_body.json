{
  "url": "https://x6.antv.antgroup.com/api/model/edge#vertices",
  "metadata": {
    "title": "边 | X6 图编辑引擎",
    "description": "",
    "keywords": [],
    "author": "",
    "publish_date": "",
    "domain": "x6.antv.antgroup.com"
  },
  "content": "# 边\n\nEdge 是边的基类，继承自 [Cell](https://x6.antv.antgroup.com/api/model/cell)，并定义了边的通用属性和方法。\n\n## 属性\n\n除了从 Cell 继承[属性](https://x6.antv.antgroup.com/api/model/cell#%E5%B1%9E%E6%80%A7)外，还支持以下属性。\n\n选项| 类型| 默认值| 必选| 描述  \n---|---|---|---|---  \nsource| TerminalData| | | 起点或起始节点、连接桩信息。  \ntarget| TerminalData| | | 终点或终止节点、连接桩信息。  \nvertices| Point.PointLike[]| | | 路径点。  \nrouter| RouterData| | | 路由。  \nconnector| ConnectorData| | | 连接器。  \nlabels| Label[] | string[]| | | 标签。  \ndefaultLabel| Label| | | 默认标签。  \n  \n### source 和 target\n\n设置边的起点/终点或起始节点/终止节点，可以分为一下几种情况：\n\n  * **连接到画布上的点**\n        \n        const edge = graph.addEdge({\n        \n          source:{ x:40, y:40},\n        \n          target:{ x:180, y:80},\n        \n        })\n\n  * **连接到节点/边**\n        \n        const edge = graph.addEdge({\n        \n          source:{ cell:'source-cell-id'},\n        \n          target:{ cell:'target-cell-id'},\n        \n        })\n\n  * **连接到节点上的连接桩**\n        \n        const edge = graph.addEdge({\n        \n          source:{ cell:'source-cell-id', port:'port-id'},\n        \n          target:{ cell:'target-cell-id', port:'port-id'},\n        \n        })\n\n  * **连接到节点上的某个元素**\n        \n        const edge = graph.addEdge({\n        \n          source:{ cell:'source-cell-id', selector:'some-selector'},\n        \n          target:{ cell:'target-cell-id', selector:'some-selector'},\n        \n        })\n\n\n\n\n另外，边的[锚点 anchor](https://x6.antv.antgroup.com/api/registry/node-anchor) 和[连接点 ConnectionPoint](https://x6.antv.antgroup.com/api/registry/connection-point) 选项共同确定了边的起点和终点。\n\n  * 起点：从第一个路径点或目标节点的中心（没有路径点时）画一条参考线到源节点的锚点，然后根据 connectionPoint 指定的交点计算方法，计算参考线与图形的交点，该交点就是边的起点。\n  * 终点：从最后一个路径点或源节点的中心（没有路径点时）画一条参考线到目标节点的锚点，然后根据 connectionPoint 指定的交点计算方法，计算参考线与图形的交点，该交点就是边的终点。\n\n\n\n创建边时可以分别为 `source` 和 `target` 指定锚点和连接点。\n\n  * **指定锚点**\n        \n        const edge = graph.addEdge({\n        \n          source:{\n        \n            cell:'source-id',\n        \n            anchor:{\n        \n              name:'midSide',\n        \n              args:{\n        \n                dx:10,\n        \n        },\n        \n        },\n        \n        },\n        \n          target:{\n        \n            cell:'target-id',\n        \n            anchor:'orth',// 没有参数时可以简化写法\n        \n        },\n        \n        })\n\n  * **指定连接点**\n        \n        const edge = graph.addEdge({\n        \n          source:{\n        \n            cell:'source-id',\n        \n            connectionPoint:{\n        \n              name:'boundary',\n        \n              args:{\n        \n                sticky:true,\n        \n        },\n        \n        },\n        \n        },\n        \n          target:{\n        \n            cell:'target-id',\n        \n            connectionPoint:'boundary',// 没有参数时可以简化写法\n        \n        },\n        \n        })\n\n\n\n\n### vertices\n\n路径点 `vertices` 是一个点的数组。边从起点开始，按顺序经过路径点，最后到达终点。\n    \n    \n    const edge = graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      vertices:[\n    \n    { x:100, y:200},\n    \n    { x:300, y:120},\n    \n    ],\n    \n    })\n\n### router\n\n路由 `router` 将对 `vertices` 进一步处理，并在必要时添加额外的点，然后返回处理后的点（不包含边的起点和终点）。例如，经过 [`orth`](https://x6.antv.antgroup.com/api/registry/router#orth) 路由处理后，边的每一条链接线段都是水平或垂直的。\n\n我们默认提供了以下几种路由。\n\n路由名称| 说明  \n---|---  \nnormal| [默认路由](https://x6.antv.antgroup.com/api/registry/router#normal)，原样返回路径点。  \north| [正交路由](https://x6.antv.antgroup.com/api/registry/router#orth)，由水平或垂直的正交线段组成。  \noneSide| [受限正交路由](https://x6.antv.antgroup.com/api/registry/router#oneside)，由受限的三段水平或垂直的正交线段组成。  \nmanhattan| [智能正交路由](https://x6.antv.antgroup.com/api/registry/router#manhattan)，由水平或垂直的正交线段组成，并自动避开路径上的其他节点（障碍）。  \nmetro| [智能地铁线路由](https://x6.antv.antgroup.com/api/registry/router#metro)，由水平或垂直的正交线段和斜角线段组成，类似地铁轨道图，并自动避开路径上的其他节点（障碍）。  \ner| [实体关系路由](https://x6.antv.antgroup.com/api/registry/router#er)，由 `Z` 字形的斜角线段组成。  \n  \n可以这样指定路由名称 `name` 和路由参数 `args`：\n    \n    \n    const edge = graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      vertices:[\n    \n    { x:100, y:200},\n    \n    { x:300, y:120},\n    \n    ],\n    \n      router:{\n    \n        name:'orth',\n    \n        args:{\n    \n          padding:10,\n    \n    },\n    \n    },\n    \n    })\n\n当没有路由参数 `args` 时，也可以简化为：\n    \n    \n    const edge = graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      vertices:[\n    \n    { x:100, y:200},\n    \n    { x:300, y:120},\n    \n    ],\n    \n      router:'orth',\n    \n    })\n\n除了上面几种内置路由，我们还可以创建自定义路由，并注册使用，更多细节请参考[自定义路由](https://x6.antv.antgroup.com/api/registry/router#registry)教程。\n\n### connector\n\n连接器将起点、路由返回的点、终点加工为 `<path>` 元素的 [`d`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d) 属性，决定了边渲染到画布后的样式。\n\n我们默认提供了以下几种连接器。\n\n连接器名称| 说明  \n---|---  \nnormal| [简单连接器](https://x6.antv.antgroup.com/api/registry/connector#normal)，用直线连接起点、路由点和终点。  \nsmooth| [平滑连接器](https://x6.antv.antgroup.com/api/registry/connector#smooth)，用三次贝塞尔曲线线连接起点、路由点和终点。  \nrounded| [圆角连接器](https://x6.antv.antgroup.com/api/registry/connector#rounded)，用直线连接起点、路由点和终点，并在线段连接处用圆弧链接（倒圆角）。  \njumpover| [跳线连接器](https://x6.antv.antgroup.com/api/registry/connector#jumpover)，用直线连接起点、路由点和终点，并在边与边的交叉处用跳线符号链接。  \n  \n可以这样指定连接器名称 `name` 和路由参数 `args`：\n    \n    \n    const edge = graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      vertices:[\n    \n    { x:100, y:200},\n    \n    { x:300, y:120},\n    \n    ],\n    \n      connector:{\n    \n        name:'rounded',\n    \n        args:{\n    \n          radius:20,\n    \n    },\n    \n    },\n    \n    })\n\n当没有连接器参数 `args` 时，也可以简化为：\n    \n    \n    const edge = graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      vertices:[\n    \n    { x:100, y:200},\n    \n    { x:300, y:120},\n    \n    ],\n    \n      connector:'rounded',\n    \n    })\n\n除了上面几种内置连接器，我们还可以创建自定义连接器，并注册使用，更多细节请参考[自定义连接器](https://x6.antv.antgroup.com/api/registry/connector#registry)教程。\n\n### labels 和 defaultLabel\n\n由于标签配置非常灵活，所以我们提供了单独的教程来介绍如何使用标签，详情请参考[使用标签](https://x6.antv.antgroup.com/api/model/labels)教程。\n\n## 方法\n\n### 通用\n\n#### isEdge()\n    \n    \n    isEdge():true\n\n判断是不是边，该方法始终返回 `true`。\n\n#### getBBox()\n    \n    \n    getBBox(): Rectangle\n\n返回边的包围盒。\n\n#### getPolyline()\n    \n    \n    getPolyline(): Polyline\n\n返回由端点和路径点组成的线段。\n\n#### hasLoop(...)\n    \n    \n    hasLoop(options:{ deep?:boolean}):boolean\n\n是否包含循环链接。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.deep| boolean| | `false`| 是否进行嵌套检查。  \n  \n  * 当 `options.deep` 为 `false` 时，表示仅当起始节点和终止节点为同一节点时才是循环连接。\n  * 当 `options.deep` 为 `true` 时，表示当起始节点和终止节点为同一节点或起始节点与终止节点有父子嵌套关系时都是循环连接。\n\n\n\n### 链接 Terminal\n\n#### getSource()\n    \n    \n    getSource(): Edge.TerminalData\n\n获取边的起始节点/起始点信息。\n\n#### getSourceCell()\n    \n    \n    getSourceCell(): Cell |null\n\n获取边的起始节点/边，没有连接到节点/边时返回 `null`。\n\n#### getSourceNode()\n    \n    \n    getSourceNode(): Node |null\n\n获取边的起始节点，没有连接到节点时返回 `null`。\n\n#### getSourceCellId()\n    \n    \n    getSourceCellId():string|null\n\n获取边的起始节点/边的 ID，没有连接到节点/边时返回 `null`。\n\n#### getSourcePortId()\n    \n    \n    getSourcePortId():string|null\n\n获取边的起始连接桩 ID，没有连接到连接桩时返回 `null`。\n\n#### getSourcePoint()\n    \n    \n    getSourcePoint(): Point.PointLike |null\n\n获取边链接到画布的起始点，当边连接到节点/边时返回 `null`。\n\n#### setSource(...)\n    \n    \n    /**\n    \n     * 链接到节点。\n    \n     */\n    \n    setSource(\n    \n      node: Node,\n    \n      args?: Edge.SetCellTerminalArgs,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n    \n    /**\n    \n     * 链接到边。\n    \n     */\n    \n    setSource(\n    \n      edge: Edge,\n    \n      args?: Edge.SetEdgeTerminalArgs,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n    \n    /**\n    \n     * 链接到画布上的点。\n    \n     */\n    \n    setSource(\n    \n      point: Point | Point.PointLike,\n    \n      args?: Edge.SetTerminalCommonArgs,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n    \n    /**\n    \n     * 设置边的起点或起始节点/边。\n    \n     */\n    \n    setSource(args: Edge.TerminalData, options?: Edge.SetOptions):this\n\n#### getTarget()\n    \n    \n    getTarget(): Edge.TerminalData\n\n获取边的终止节点/终止点信息。\n\n#### getTargetCell()\n    \n    \n    getTargetCell(): Cell |null\n\n获取边的终止节点/边，没有连接到节点/边时返回 `null`。\n\n#### getTargetNode()\n    \n    \n    getTargetNode(): Node |null\n\n获取边的终止节点，没有连接到节点时返回 `null`。\n\n#### getTargetCellId()\n    \n    \n    getTargetCellId():string|null\n\n获取边的终止节点/边的 ID，没有连接到节点/边时返回 `null`。\n\n#### getTargetPortId()\n    \n    \n    getTargetPortId():string|null\n\n获取边的终止连接桩 ID，没有连接到连接桩时返回 `null`。\n\n#### getTargetPoint()\n    \n    \n    getTargetPoint(): Point.PointLike |null\n\n获取边链接到画布的终止点，当边连接到节点/边时返回 `null`。\n\n#### setTarget()\n    \n    \n    /**\n    \n     * 链接到节点。\n    \n     */\n    \n    setTarget(\n    \n      edge: Node,\n    \n      args?: Edge.SetCellTerminalArgs,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n    \n    /**\n    \n     * 链接到边。\n    \n     */\n    \n    setTarget(\n    \n      edge: Edge,\n    \n      args?: Edge.SetEdgeTerminalArgs,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n    \n    /**\n    \n     * 链接到画布上的点。\n    \n     */\n    \n    setTarget(\n    \n      point: Point | Point.PointLike,\n    \n      args?: Edge.SetTerminalCommonArgs,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n    \n    /**\n    \n     * 设置边的终点或终止节点/边。\n    \n     */\n    \n    setTarget(args: Edge.TerminalData, options?: Edge.SetOptions):this\n\n#### disconnect(...)\n    \n    \n    disconnect(options?: Edge.SetOptions)\n\n删除边的链接信息，即将边的起点和终点都设置为画布的原点 `{ x:0, y:0 }`。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:source'` 和 `'change:target'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n### 路径点 Vertice\n\n#### getVertices()\n    \n    \n    getVertices(): Point.PointLike[]\n\n获取路径点，当没有路径点时返回空数组。\n\n#### setVertices(...)\n    \n    \n    setVertices(\n    \n      vertices: Point.PointLike | Point.PointLike[],\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n\n设置路径点。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nvertices| Point.PointLike | Point.PointLike[]| ✓| | 路径点。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:vertices'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### insertVertex(...)\n    \n    \n    insertVertex(\n    \n      vertice: Point.PointLike,\n    \n      index?:number,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n\n在指定位置插入一个路径点。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nvertice| Point.PointLike| ✓| | 路径点。  \nindex| number| | | 插入位置，默认插入到路径点数组的末尾。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:vertices'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### appendVertex(...)\n    \n    \n    appendVertex(vertex: Point.PointLike, options?: Edge.SetOptions):this\n\n在路径点数组的末尾插入一个路径点。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nvertex| Point.PointLike| ✓| | 路径点。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:vertices'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### getVertexAt(...)\n    \n    \n    getVertexAt(index:number): Point.PointLike |null\n\n获取指定索引位置的路径点。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 索引位置。  \n  \n#### setVertexAt(...)\n    \n    \n    setVertexAt(\n    \n      index:number,\n    \n      vertice: Point.PointLike,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n\n设置指定索引位置的路径点。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 索引位置。  \nvertice| Point.PointLike| ✓| | 路径点。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:vertices'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeVertexAt(...)\n    \n    \n    removeVertexAt(index:number, options?: Edge.SetOptions):this\n\n删除指定索引位置的路径点。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 索引位置。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:vertices'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n### 路由 Router\n\n#### getRouter()\n    \n    \n    getRouter(): Edge.RouterData\n\n获取路由。\n\n#### setRouter(...)\n    \n    \n    setRouter(name:string, args?: KeyValue, options?: Edge.SetOptions):this\n    \n    setRouter(router: Edge.RouterData, options?: Edge.SetOptions):this\n\n设置路由。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nname| string| ✓| | 路由名称。  \nargs| KeyValue| | | 路由参数。  \nrouter| Edge.RouterData| ✓| | 路由。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:router'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeRouter(...)\n    \n    \n    removeRouter(options?: Edge.SetOptions):this\n\n删除路由。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:router'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n### 连接器 Connector\n\n#### getConnector()\n    \n    \n    getConnector(): Edge.ConnectorData\n\n获取连接器。\n\n#### setConnector(...)\n    \n    \n    setConnector(name:string, args?: KeyValue, options?: Edge.SetOptions):this\n    \n    setConnector(connector: Edge.ConnectorData, options?: Edge.SetOptions):this\n\n设置连接器。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nname| string| ✓| | 连接器名称。  \nargs| KeyValue| | | 连接器参数。  \nconnector| Edge.ConnectorData| ✓| | 连接器。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:connector'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeConnector(...)\n    \n    \n    removeConnector(options?: Edge.SetOptions):this\n\n删除连接器。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:connector'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n### 标签 Label\n\n#### getDefaultLabel()\n    \n    \n    getDefaultLabel(): Edge.Label\n\n获取默认标签。\n\n#### getLabels()\n    \n    \n    getLabels(): Edge.Label[]\n\n获取所有标签。\n\n#### setLabels(...)\n    \n    \n    setLabels(\n    \n      labels: Edge.Label | Edge.Label[]|string|string[],\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n\n设置标签。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nlabels| Edge.Label | Edge.Label[] | string | string[]| ✓| | 标签或标签数组。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:labels'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### insertLabel(...)\n    \n    \n    insertLabel(\n    \n      label: Edge.Label |string,\n    \n      index?:number,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n\n在指定位置插入标签。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nlabel| Edge.Label | string| ✓| | 标签。  \nindex| number| | | 插入的位置，缺省时插入到标签数组的末尾。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:labels'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### appendLabel(...)\n    \n    \n    appendLabel(label: Edge.Label |string, options?: Edge.SetOptions):this\n\n在标签数组末尾插入标签。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nlabel| Edge.Label | string| ✓| | 标签。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:labels'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### getLabelAt(...)\n    \n    \n    getLabelAt(index:number): Edge.Label |null\n\n获取指定位置的标签。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 索引位置。  \n  \n#### setLabelAt(...)\n    \n    \n    setLabelAt(\n    \n      index:number,\n    \n      label: Edge.Label |string,\n    \n      options?: Edge.SetOptions,\n    \n    ):this\n\n设置指定位置的标签。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 索引位置。  \nlabel| Edge.Label | string| ✓| | 标签。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:labels'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n#### removeLabelAt(...)\n    \n    \n    removeLabelAt(index:number, options?: Edge.SetOptions):this\n\n删除指定位置的标签。\n\n名称| 类型| 必选| 默认值| 描述  \n---|---|---|---|---  \nindex| number| ✓| | 索引位置。  \noptions.silent| boolean| | `false`| 为 `true` 时不触发 `'change:labels'` 事件和画布重绘。  \noptions...others| object| | | 其他自定义键值对，可以在事件回调中使用。  \n  \n文档贡献者\n\n\n\n\n上一篇\n\n节点\n\n下一篇\n\n标签\n"
}