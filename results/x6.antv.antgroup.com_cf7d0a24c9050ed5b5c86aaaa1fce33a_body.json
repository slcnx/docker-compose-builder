{
  "url": "https://x6.antv.antgroup.com/api/registry/router#manhattan",
  "metadata": {
    "title": "路由 | X6 图编辑引擎",
    "description": "",
    "keywords": [],
    "author": "",
    "publish_date": "",
    "domain": "x6.antv.antgroup.com"
  },
  "content": "# 路由\n\n路由将边的路径点 [vertices](https://x6.antv.antgroup.com/tutorial/basic/edge#vertices) 做进一步转换处理，并在必要时添加额外的点，然后返回处理后的点（不包含边的起点和终点）。例如，经过 [`orth`](https://x6.antv.antgroup.com/api/registry/router#orth) 路由处理后，边的每一条线段都是水平或垂直的正交线段。\n\nX6 中内置了以下几种路由。\n\n路由名称| 说明  \n---|---  \nnormal| [默认路由](https://x6.antv.antgroup.com/api/registry/router#normal)，原样返回路径点。  \north| [正交路由](https://x6.antv.antgroup.com/api/registry/router#orth)，由水平或垂直的正交线段组成。  \noneSide| [受限正交路由](https://x6.antv.antgroup.com/api/registry/router#oneside)，由受限的三段水平或垂直的正交线段组成。  \nmanhattan| [智能正交路由](https://x6.antv.antgroup.com/api/registry/router#manhattan)，由水平或垂直的正交线段组成，并自动避开路径上的其他节点（障碍）。  \nmetro| [智能地铁线路由](https://x6.antv.antgroup.com/api/registry/router#metro)，由水平或垂直的正交线段和斜角线段组成，类似地铁轨道图，并自动避开路径上的其他节点（障碍）。  \ner| [实体关系路由](https://x6.antv.antgroup.com/api/registry/router#er)，由 `Z` 字形的斜角线段组成。  \n  \n在使用时，可以为边设置路由：\n    \n    \n    const edge = graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      router:{\n    \n        name:'oneSide',\n    \n        args:{\n    \n          side:'right',\n    \n    },\n    \n    },\n    \n    })\n\n当路由没有参数时，也可以简化为：\n    \n    \n    const edge = graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      router:'oneSide',\n    \n    })\n\n也可以调用 方法来设置路由：\n    \n    \n    edge.setRouter('oneSide',{ side:'right'})\n\n在创建画布时，可以通过 `connecting` 选项来设置全局默认路由（画布的默认路由是 `'normal'`）:\n    \n    \n    newGraph({\n    \n      connecting:{\n    \n        router:{\n    \n          name:'oneSide',\n    \n          args:{\n    \n            side:'right',\n    \n    },\n    \n    },\n    \n    },\n    \n    })\n\n当路由没有参数时，也可以简化为：\n    \n    \n    newGraph({\n    \n      connecting:{\n    \n        router:'orth',\n    \n    },\n    \n    })\n\n下面我们一起来看看如何使用内置路由，以及如何自定并注册自定义路由。\n\n## 内置路由\n\n### normal\n\n系统的默认路由，该路由原样返回传入的 `vertices` 路径点。\n\n### orth\n\n正交路由，该路由在路径上添加额外的一些点，使边的每一条线段都水平或垂直正交。\n\n支持的参数如下表：\n\n参数名| 参数类型| 是否必选| 默认值| 参数说明  \n---|---|---|---|---  \npadding| SideOptions| 否| 20| 设置锚点距离转角的最小距离。  \n  \n`SideOptions` 定义如下：\n    \n    \n    exporttypeSideOptions=\n    \n    |number\n    \n    |{\n    \n          vertical?:number\n    \n          horizontal?:number\n    \n          left?:number\n    \n          top?:number\n    \n          right?:number\n    \n          bottom?:number\n    \n    }\n\n例如：\n    \n    \n    graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      vertices:[\n    \n    { x:100, y:200},\n    \n    { x:300, y:120},\n    \n    ],\n    \n      router:{\n    \n        name:'orth',\n    \n        args:{\n    \n          padding:{\n    \n            left:50,\n    \n    },\n    \n    },\n    \n    },\n    \n    })\n\nhelloworld\n\n### oneSide\n\n`oneSide` 路由是正交路由 `orth` 的受限版本，该路生成一个严格的三段路由：从起始节点的 `side` 侧开始，经过中间段，再从终止节点的 `side` 侧结束路由。需要特别注意的是，使用该路由时请不要同时指定 `vertices`，否则路由效果会非常差。\n\n支持的参数如下表：\n\n参数名| 参数类型| 是否必选| 默认值| 参数说明  \n---|---|---|---|---  \nside| `'left'` | `'right'` | `'top'` | `'bottom'`| 否| `'bottom'`| 路由的起始/结束方向，默认值为 `'bottom'`。  \npadding| SideOptions| 否| 20| 设置锚点距离转角的最小距离。  \n  \n例如：\n    \n    \n    graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      router:{\n    \n        name:'oneSide',\n    \n        args:{ side:'right'},\n    \n    },\n    \n    })\n\nhelloworld\n\n### manhattan\n\n曼哈顿路由 `'manhattan'` 路由是正交路由 `'orth'` 的智能版本，该路由由水平或垂直的正交线段组成，并自动避开路径上的其他节点（障碍）。\n\n我们为该路由算法提供了丰富的选项：\n\n参数名| 参数类型| 是否必选| 默认值| 参数说明  \n---|---|---|---|---  \nstep| number| 否| `10`| 路由算法步进步长，其值越小计算量越大，推荐使用画布的网格大小。  \nexcludeTerminals| ('source' | 'target')[]| 否| `[]`| 忽略起始或终止节点，忽略后不参与障碍物计算。  \nexcludeShapes| string[]| 否| `[]`| 忽略指定形状的节点，忽略后不参与障碍物计算。  \nexcludeNodes| (Node | string)[]| 否| `[]`| 忽略的节点，忽略后不参与障碍物计算。  \nstartDirections| string[]| 否| `['top', 'right', 'bottom', 'left']`| 支持从哪些方向开始路由。  \nendDirections| string[]| 否| `['top', 'right', 'bottom', 'left']`| 支持从哪些方向结束路由。  \npadding| SideOptions| 否| -| 设置锚点距离转角的最小距离。  \nfallbackRouter| Router| 否| `Registry.Router.presets.orth`| 无法避开障碍物的场景，降级到指定路由。  \n  \n例如：\n    \n    \n    graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      router:{\n    \n        name:'manhattan',\n    \n        args:{\n    \n          startDirections:['top'],\n    \n          endDirections:['bottom'],\n    \n    },\n    \n    },\n    \n    })\n\n#### 注意\n\nmanhattan 路由的特性是自动避开路径中的障碍物，如果出现无法避开的情况，就会自动降级到 orth 路由，此时为了让开发者能够发现问题，我们在控制台增加了 warn：Unable to execute manhattan algorithm, use orth instead。\n\nSourceTargetObstacleObstacleObstacle\n\n### metro\n\n地铁路由 `metro` 是曼哈顿路由 `manhattan` 的一个变种，它由水平或垂直的正交线段和斜角线段组成，类似地铁轨道图，并自动避开路径上的其他节点（障碍）。其选项与 [manhattan](https://x6.antv.antgroup.com/api/registry/router#manhattan)一样，但 `maxDirectionChange` 的默认值为 `45`，表示路由线段的最大倾斜角度为 `45` 度。\n\n例如：\n    \n    \n    graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      router:{\n    \n        name:'metro',\n    \n        args:{\n    \n          startDirections:['top'],\n    \n          endDirections:['bottom'],\n    \n    },\n    \n    },\n    \n    })\n\nSourceTargetObstacleObstacleObstacle\n\n### er\n\n实体关系路由 `er` 由 Z 字形的斜角线段组成，常用于表示 ER 图中的实体之间的连线。\n\n支持的参数如下表：\n\n参数名| 参数类型| 是否必选| 默认值| 参数说明  \n---|---|---|---|---  \noffset| number |'center'| 否| `32`| 路由的第一个点和最后一个点与节点之间的距离。当取值为 `'center'` 时，节点距离的中心作为路由点坐标。  \nmin| number| 否| `16`| 路由的第一个点和最后一个点与节点之间的最小距离。  \ndirection| `'T'`|`'B'`|`'L'`|`'R'`|`'H'`|`'V'`| 否| -| 路由方向，缺省时将自动选择最优方向。  \n  \n例如：\n    \n    \n    graph.addEdge({\n    \n      source,\n    \n      target,\n    \n      router:{\n    \n        name:'er',\n    \n        args:{\n    \n          offset:24,\n    \n    },\n    \n    },\n    \n    })\n\nOptions\n\noffset\n\ncenternumber\n\n32\n\nmin\n\n16\n\ndirection\n\nNONELRHTBV\n\nhelloworld\n\n## 自定义路由\n\n除了内置路由，我们还可以按照一定规则来创建自定义路由，例如，实现随机的路由：\n    \n    \n    // 路由参数\n    \n    interfaceRandomRouterArgs{\n    \n      bounces?:number\n    \n    }\n    \n    functionrandomRouter(\n    \n      vertices: Point.PointLike[],\n    \n      args: RandomRouterArgs,\n    \n      view: EdgeView,\n    \n    ){\n    \n    const bounces = args.bounces ||20\n    \n    const points = vertices.map((p)=> Point.create(p))\n    \n    for(var i =0; i < bounces; i++){\n    \n    const sourceCorner = view.sourceBBox.getCenter()\n    \n    const targetCorner = view.targetBBox.getCenter()\n    \n    const randomPoint = Point.random(\n    \n          sourceCorner.x,\n    \n          targetCorner.x,\n    \n          sourceCorner.y,\n    \n          targetCorner.y,\n    \n    )\n    \n        points.push(randomPoint)\n    \n    }\n    \n    return points\n    \n    }\n    \n    Graph.registerRouter('random', randomRouter)\n    \n    edge.setRouter('random',{ bounces:3})\n\nSourceTarget\n\n文档贡献者\n\n上一篇\n\n边上工具\n\n下一篇\n\n连接器\n"
}
